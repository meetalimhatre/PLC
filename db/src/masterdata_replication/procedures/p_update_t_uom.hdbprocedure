PROCEDURE "sap.plc.db.masterdata_replication.procedures::p_update_t_uom" (
    IN INPUT_TABLE TABLE (
    	"UOM_ID" 	NVARCHAR(3),
    	"DIMENSION_ID" NVARCHAR(10),
    	"NUMERATOR" INTEGER,
    	"DENOMINATOR" INTEGER,
    	"EXPONENT_BASE10" SMALLINT,
    	"SI_CONSTANT" DECIMAL(9,6),
    	"_SOURCE" TINYINT -- 1: PLC / 2: ERP
    ),
    OUT OV_PROCESSED_ROWS INTEGER
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

as

    lv_current_user nvarchar(256);
    lv_current_utctimestamp	timestamp;
    lv_rows_count integer;
    lv_run_id nvarchar(50);

BEGIN

    select SESSION_CONTEXT('APPLICATIONUSER')
        into lv_current_user
        from "sap.plc.db::DUMMY";

    SELECT SESSION_CONTEXT('SCHEDULER_RUN_ID') 
        INTO lv_run_id 
        FROM "sap.plc.db::DUMMY";    

    select current_utctimestamp 
        into lv_current_utctimestamp 
        from "sap.plc.db::DUMMY";

    -- Insert into general Error Table
    INSERT INTO "sap.plc.db::map.t_replication_log" (
        FIELD_NAME ,
        FIELD_VALUE,
        MESSAGE_TEXT ,
        MESSAGE_TIME ,
        MESSAGE_TYPE ,
        TABLE_NAME,
        OPERATION,
        RUN_ID
    )
        select 
            'DIMENSION_ID'                                          as FIELD_NAME ,
            it.DIMENSION_ID                                         as FIELD_VALUE ,
            'Unknown Dimension ID for UOM ID ' || it.UOM_ID         as MESSAGE_TEXT ,
            lv_current_utctimestamp                                 as MESSAGE_TIME ,
            'ERROR'                                                 as MESSAGE_TYPE ,
            't_uom'                                                 as TABLE_NAME,
            'Replication_Update'                                    as OPERATION,
            :lv_run_id                                              as RUN_ID
        from :INPUT_TABLE as it
        where it.DIMENSION_ID not in (select DIMENSION_ID from "sap.plc.db::basis.t_dimension")
    ;

    lt_update_records =
        select UOM_ID, DIMENSION_ID, NUMERATOR, DENOMINATOR, EXPONENT_BASE10, SI_CONSTANT, _SOURCE
        from 
        (select *,
            Count(*) OVER (PARTITION BY UOM_ID) AS DUPLICATE_KEY_COUNT
            from :INPUT_TABLE
        ) as it
        where it.DUPLICATE_KEY_COUNT = 1
        	and it.DIMENSION_ID in (select DIMENSION_ID from "sap.plc.db::basis.t_dimension") 
        except      
              (select UOM_ID, 
            		--IFNULL(it.DECIMALS_DISPLAYED,0),
            		DIMENSION_ID, NUMERATOR, DENOMINATOR, EXPONENT_BASE10, SI_CONSTANT, _SOURCE
                    from "sap.plc.db::basis.t_uom" as std
                    where _VALID_TO IS NULL
                    AND std.UOM_ID in (select UOM_ID from :INPUT_TABLE));
              
    SELECT COUNT(UOM_ID) into lv_rows_count from :lt_update_records;
    OV_PROCESSED_ROWS = :lv_rows_count;
    
    if (:lv_rows_count > 0) then
        -- outdate the old timestamp
    	UPDATE "sap.plc.db::basis.t_uom" as tbl
    		SET _VALID_TO = :lv_current_utctimestamp , _CREATED_BY = :lv_current_user  
    		WHERE 
    		      tbl.UOM_ID
    		      in (select UOM_ID
    			      from :lt_update_records as upd 
    			      where upd.UOM_ID = tbl.UOM_ID
    		      )
    			  AND tbl._VALID_FROM < :lv_current_utctimestamp 
    			  AND tbl._VALID_TO IS NULL;
    	
    	-- inser the new entries
    	INSERT INTO  "sap.plc.db::basis.t_uom" 
    		(UOM_ID, 
    		DIMENSION_ID, NUMERATOR, DENOMINATOR, EXPONENT_BASE10, SI_CONSTANT, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY )
    		select UOM_ID, 
    		DIMENSION_ID, NUMERATOR, DENOMINATOR, EXPONENT_BASE10, SI_CONSTANT, :lv_current_utctimestamp as _VALID_FROM, null as _VALID_TO, _SOURCE, :lv_current_user as _CREATED_BY 
    		from :lt_update_records;
	END IF;	
    
END