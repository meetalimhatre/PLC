PROCEDURE "sap.plc.db.masterdata_replication.procedures::p_update_t_account__text" (
    IN INPUT_TABLE TABLE (
    	"ACCOUNT_ID" NVARCHAR(10),
    	"CONTROLLING_AREA_ID" NVARCHAR(4),
    	"LANGUAGE" NVARCHAR(11),
    	"ACCOUNT_DESCRIPTION" NVARCHAR(250),
    	"_SOURCE" TINYINT
    ),
    OUT OV_PROCESSED_ROWS INTEGER
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS

    lv_current_user nvarchar(256);
    lv_current_utctimestamp	timestamp;
    lv_rows_count integer;
    lv_run_id nvarchar(50);

BEGIN

    select current_utctimestamp 
        into lv_current_utctimestamp 
        from "sap.plc.db::DUMMY";

    SELECT SESSION_CONTEXT('APPLICATIONUSER') 
	    INTO lv_current_user 
		FROM "sap.plc.db::DUMMY";

    SELECT SESSION_CONTEXT('SCHEDULER_RUN_ID') 
        INTO lv_run_id 
        FROM "sap.plc.db::DUMMY";    

    INSERT INTO "sap.plc.db::map.t_replication_log" (
        FIELD_NAME ,
        FIELD_VALUE,
        MESSAGE_TEXT ,
        MESSAGE_TIME ,
        MESSAGE_TYPE ,
        TABLE_NAME ,
        OPERATION ,
        RUN_ID
    )
        select 
            'ACCOUNT_ID'                                                                            as FIELD_NAME ,
            it.ACCOUNT_ID                                                                           as FIELD_VALUE ,
            'Unknown Account ID for Controlling Area ID ' || it.CONTROLLING_AREA_ID                 as MESSAGE_TEXT ,
            :lv_current_utctimestamp                                                                as MESSAGE_TIME ,
            'ERROR'                                                                                 as MESSAGE_TYPE ,
            't_account__text'                                                                       as TABLE_NAME ,
            'Replication_Update'                                                                    as OPERATION ,
            :lv_run_id                                                                              as RUN_ID
        from :INPUT_TABLE as it
        left join "sap.plc.db::basis.t_account" as account on (it.ACCOUNT_ID, it.CONTROLLING_AREA_ID) = (account.ACCOUNT_ID, account.CONTROLLING_AREA_ID)
        where account.ACCOUNT_ID is null and account.CONTROLLING_AREA_ID is null
    ;

    INSERT INTO "sap.plc.db::map.t_replication_log" (
        FIELD_NAME ,
        FIELD_VALUE,
        MESSAGE_TEXT ,
        MESSAGE_TIME ,
        MESSAGE_TYPE ,
        TABLE_NAME ,
        OPERATION,
        RUN_ID
    )
        select 
            'LANGUAGE'                          as FIELD_NAME ,
            it.LANGUAGE                         as FIELD_VALUE ,
            'Unknown Language'                  as MESSAGE_TEXT ,
            lv_current_utctimestamp             as MESSAGE_TIME ,
            'ERROR'                             as MESSAGE_TYPE ,
            't_account__text'                   as TABLE_NAME ,
            'Replication_Update'                as OPERATION ,
            :lv_run_id                          as RUN_ID
        from :INPUT_TABLE as it
        where it.LANGUAGE not in (select LANGUAGE from "sap.plc.db::basis.t_language")
    ;
    
    lt_update_records =
        select ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE, ACCOUNT_DESCRIPTION, _SOURCE
        from 
        (select *, 
            Count(*) OVER (PARTITION BY ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE) AS DUPLICATE_KEY_COUNT
            from :INPUT_TABLE
        ) as it
        where it.DUPLICATE_KEY_COUNT = 1
            -- ignore not existing Controlling Area
          and (it.ACCOUNT_ID, it.CONTROLLING_AREA_ID) in (select ACCOUNT_ID, CONTROLLING_AREA_ID from "sap.plc.db::basis.t_account") 
          and it.LANGUAGE in (select LANGUAGE from "sap.plc.db::basis.t_language") 
            -- ignore unchanged records 
          except    
              (select ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE, ACCOUNT_DESCRIPTION, _SOURCE
                    from "sap.plc.db::basis.t_account__text" as std
                    where _VALID_TO IS NULL
                    AND (std.ACCOUNT_ID, std.CONTROLLING_AREA_ID, std.LANGUAGE) in (select ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE from :INPUT_TABLE));
    
    SELECT COUNT(ACCOUNT_ID) into lv_rows_count from :lt_update_records;
    OV_PROCESSED_ROWS := :lv_rows_count;
    
    if (:lv_rows_count > 0) then
    
        -- outdate the old timestamp
    	UPDATE "sap.plc.db::basis.t_account__text" as tbl
    		SET _VALID_TO = :lv_current_utctimestamp , _CREATED_BY = :lv_current_user  
    		WHERE 
    		      (tbl.ACCOUNT_ID, tbl.CONTROLLING_AREA_ID, tbl.LANGUAGE)
    		      in (select ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE
    			      from :lt_update_records as upd 
    			      where upd.CONTROLLING_AREA_ID = tbl.CONTROLLING_AREA_ID
    			        and upd.ACCOUNT_ID = tbl.ACCOUNT_ID
    			        and upd.LANGUAGE = tbl.LANGUAGE
    		      )
    			  AND tbl._VALID_FROM < :lv_current_utctimestamp 
    			  AND tbl._VALID_TO IS NULL;
    	
    	-- insert the new entries
    	INSERT INTO  "sap.plc.db::basis.t_account__text" 
    		(ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE, ACCOUNT_DESCRIPTION, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY )
    		select ACCOUNT_ID, CONTROLLING_AREA_ID, LANGUAGE, ACCOUNT_DESCRIPTION, :lv_current_utctimestamp as _VALID_FROM, null as _VALID_TO, _SOURCE, :lv_current_user as _CREATED_BY 
    		from :lt_update_records;

	END IF;	
END;