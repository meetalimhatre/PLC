PROCEDURE "sap.plc.db.masterdata_replication.procedures::p_update_t_process"(
    IN INPUT_TABLE TABLE (
    	"PROCESS_ID" NVARCHAR(12),
    	"CONTROLLING_AREA_ID" NVARCHAR(4),
    	"ACCOUNT_ID" NVARCHAR(10),
    	"COMMENT" NVARCHAR(5000),
    	"_SOURCE" TINYINT -- 1: PLC / 2: ERP
    ),
    OUT OV_PROCESSED_ROWS INTEGER
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
as

    lv_current_utctimestamp	timestamp;
    lv_rows_count integer;
	lv_current_user nvarchar(256);
    lv_run_id nvarchar(50);

BEGIN

    SELECT current_utctimestamp 
        into lv_current_utctimestamp 
        from "sap.plc.db::DUMMY";
        
    SELECT SESSION_CONTEXT('APPLICATIONUSER') 
	    INTO lv_current_user 
		FROM "sap.plc.db::DUMMY";

    SELECT SESSION_CONTEXT('SCHEDULER_RUN_ID') 
        INTO lv_run_id 
        FROM "sap.plc.db::DUMMY";
    
        -- Insert into general Error Table
        INSERT INTO "sap.plc.db::map.t_replication_log" (
        	FIELD_NAME ,
        	FIELD_VALUE,
        	MESSAGE_TEXT ,
        	MESSAGE_TIME ,
        	MESSAGE_TYPE ,
            TABLE_NAME ,
            OPERATION ,
            RUN_ID
        )
            select 
                'CONTROLLING_AREA_ID'                                                   as FIELD_NAME ,
                it.CONTROLLING_AREA_ID                                                  as FIELD_VALUE ,
                'Unknown Controlling Area ID for Process ID ' || it.PROCESS_ID          as MESSAGE_TEXT ,
                lv_current_utctimestamp                                                 as MESSAGE_TIME ,
                'ERROR'                                                                 as MESSAGE_TYPE ,
                't_process'                                                             as TABLE_NAME ,
                'Replication_Update'                                                    as OPERATION ,
                :lv_run_id                                                              as RUN_ID
            from :INPUT_TABLE as it
            where it.CONTROLLING_AREA_ID not in (select CONTROLLING_AREA_ID from "sap.plc.db::basis.t_controlling_area")
        ;
        
        INSERT INTO "sap.plc.db::map.t_replication_log" (
        	FIELD_NAME ,
        	FIELD_VALUE,
        	MESSAGE_TEXT ,
        	MESSAGE_TIME ,
        	MESSAGE_TYPE ,
            TABLE_NAME ,
            OPERATION ,
            RUN_ID
        )
            select 
                'ACCOUNT_ID'                                                            as FIELD_NAME ,
                it.ACCOUNT_ID                                                           as FIELD_VALUE ,
                'Unknown Account ID for Process ID ' || it.PROCESS_ID                   as MESSAGE_TEXT ,
                lv_current_utctimestamp                                                 as MESSAGE_TIME ,
                'ERROR'                                                                 as MESSAGE_TYPE ,
                't_process'                                                             as TABLE_NAME ,
                'Replication_Update'                                                    as OPERATION ,
                :lv_run_id                                                              as RUN_ID
            from :INPUT_TABLE as it
            where it.ACCOUNT_ID is not null and it.ACCOUNT_ID not in (select ACCOUNT_ID from "sap.plc.db::basis.t_account")
        ;
    
    lt_update_records =
        select it.PROCESS_ID, it.CONTROLLING_AREA_ID, it.ACCOUNT_ID, it.COMMENT, it._SOURCE
        from 
        (select *,
            Count(*) OVER (PARTITION BY PROCESS_ID, CONTROLLING_AREA_ID) AS DUPLICATE_KEY_COUNT
            from :INPUT_TABLE
        ) as it
        where it.DUPLICATE_KEY_COUNT = 1
        and it.CONTROLLING_AREA_ID in (select CONTROLLING_AREA_ID from "sap.plc.db::basis.t_controlling_area") 
        and (it.ACCOUNT_ID is null or it.ACCOUNT_ID in (select ACCOUNT_ID from "sap.plc.db::basis.t_account") )
            -- ignore unchanged records 
        -- and (it.PROCESS_ID, it.CONTROLLING_AREA_ID, it.ACCOUNT_ID, it.COMMENT, it._SOURCE
        --     ) 
        --       not in 
        except      
              (select std.PROCESS_ID, std.CONTROLLING_AREA_ID, std.ACCOUNT_ID, std.COMMENT, std._SOURCE
                    from "sap.plc.db::basis.t_process" as std
                    where _VALID_TO IS NULL
                    AND (std.PROCESS_ID, std.CONTROLLING_AREA_ID) in (select PROCESS_ID, CONTROLLING_AREA_ID from :INPUT_TABLE));
              
    SELECT COUNT(PROCESS_ID) into lv_rows_count from :lt_update_records;
    
    OV_PROCESSED_ROWS := :lv_rows_count;

    if (:lv_rows_count > 0) then
        -- outdate the old timestamp
    	UPDATE "sap.plc.db::basis.t_process" as tbl
    		SET _VALID_TO = :lv_current_utctimestamp , _CREATED_BY = :lv_current_user  
    		WHERE 
    		      (tbl.PROCESS_ID, tbl.CONTROLLING_AREA_ID)
    		      in (select PROCESS_ID, CONTROLLING_AREA_ID
    			      from :lt_update_records as upd 
    			      where upd.PROCESS_ID = tbl.PROCESS_ID
    			        and upd.CONTROLLING_AREA_ID = tbl.CONTROLLING_AREA_ID
    		      )
    			  AND tbl._VALID_FROM < :lv_current_utctimestamp 
    			  AND tbl._VALID_TO IS NULL;
    	
    	-- insert the new entries
    	INSERT INTO  "sap.plc.db::basis.t_process" 
    		(PROCESS_ID, CONTROLLING_AREA_ID, ACCOUNT_ID, COMMENT, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY )
    		select PROCESS_ID, CONTROLLING_AREA_ID, ACCOUNT_ID, COMMENT, :lv_current_utctimestamp as _VALID_FROM, null as _VALID_TO, _SOURCE, :lv_current_user as _CREATED_BY 
    		from :lt_update_records;
		
	END IF;	
    
END