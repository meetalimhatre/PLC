PROCEDURE "sap.plc.db.masterdata_replication.procedures::p_update_t_vendor" (
    IN INPUT_TABLE TABLE (
    	"VENDOR_ID" NVARCHAR(10),
	    "VENDOR_NAME" NVARCHAR(100),
    	"COUNTRY" NVARCHAR(100),
    	"POSTAL_CODE" NVARCHAR(35),
    	"REGION" NVARCHAR(100),
    	"CITY"  NVARCHAR(100),
    	"STREET_NUMBER_OR_PO_BOX"  NVARCHAR(100),
        "IS_PERSONAL_DATA" TINYINT,
    	"_SOURCE" TINYINT -- 1: PLC / 2: ERP 
    ),
    OUT OV_PROCESSED_ROWS INTEGER
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

as

    lv_current_user nvarchar(256);
    lv_current_utctimestamp	timestamp;
    lv_rows_count integer;

BEGIN

    select SESSION_CONTEXT('APPLICATIONUSER')
        into lv_current_user
        from "sap.plc.db::DUMMY";

    select current_utctimestamp 
        into lv_current_utctimestamp 
        from "sap.plc.db::DUMMY";
    
    lt_update_records =
        select VENDOR_ID, VENDOR_NAME, COUNTRY, POSTAL_CODE, REGION,  CITY,  STREET_NUMBER_OR_PO_BOX, IS_PERSONAL_DATA, _SOURCE
        from 
        (select *, 
            Count(*) OVER (PARTITION BY VENDOR_ID) AS DUPLICATE_KEY_COUNT
            from :INPUT_TABLE
        ) as it
        where it.DUPLICATE_KEY_COUNT = 1 -- ignore duplicate key rows AT ALL (not even one of them gets inserted)
            -- ignore identical rows
        -- and (it.VENDOR_ID, IFNULL(it.VENDOR_NAME,''), IFNULL(it.COUNTRY,''),  IFNULL(it.POSTAL_CODE,''), IFNULL(it.REGION,''),  IFNULL(it.CITY,''),   IFNULL(it.STREET_NUMBER_OR_PO_BOX,''),  it._SOURCE)
        --       not in 
        except  
        	(select VENDOR_ID, VENDOR_NAME, COUNTRY, POSTAL_CODE, REGION,  CITY,  STREET_NUMBER_OR_PO_BOX, IS_PERSONAL_DATA, _SOURCE
        	--VENDOR_ID, IFNULL(VENDOR_NAME,''), IFNULL(COUNTRY,''), IFNULL(POSTAL_CODE,''), IFNULL(REGION,''),  IFNULL(CITY,''),  IFNULL(STREET_NUMBER_OR_PO_BOX,''),  _SOURCE
                    from "sap.plc.db::basis.t_vendor" as std
                    where  _VALID_TO IS NULL
                    AND std.VENDOR_ID in (select VENDOR_ID from :INPUT_TABLE));

    SELECT COUNT(VENDOR_ID) into lv_rows_count from :lt_update_records;
    OV_PROCESSED_ROWS = :lv_rows_count;
     
    if (:lv_rows_count > 0) then
        -- outdate the old timestamp
    	UPDATE "sap.plc.db::basis.t_vendor" as tbl
    		SET _VALID_TO = :lv_current_utctimestamp , _CREATED_BY = :lv_current_user  
    		WHERE 
    		      tbl.VENDOR_ID
    		      in (select VENDOR_ID
    			      from :lt_update_records as upd 
    			      where upd.VENDOR_ID = tbl.VENDOR_ID
    		      )
    			  AND tbl._VALID_FROM < :lv_current_utctimestamp 
    			  AND tbl._VALID_TO IS NULL;
    	
    	-- inser the new entries
    	INSERT INTO  "sap.plc.db::basis.t_vendor" 
    		(VENDOR_ID, VENDOR_NAME, COUNTRY, POSTAL_CODE, REGION, CITY, STREET_NUMBER_OR_PO_BOX, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY, IS_PERSONAL_DATA )
    		select VENDOR_ID, VENDOR_NAME, COUNTRY, POSTAL_CODE, REGION,  CITY, STREET_NUMBER_OR_PO_BOX, :lv_current_utctimestamp as _VALID_FROM, null as _VALID_TO, _SOURCE, :lv_current_user as _CREATED_BY, IS_PERSONAL_DATA 
    		from :lt_update_records;
	END IF;	
    
END