<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AddInViewV3.0</name>
    </assembly>
    <members>
        <member name="T:Sap.Plc.AddIn.AddInView.AddInBase">
            <summary>
            Base implementation of add-in view 
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.Current">
            <summary>
            returns the current instance of the AddInBase 
            only used internally to access the UIService and the DataService 
            from one central point
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.DataService">
            <summary>
            property that returns an IDataService that contains the data model and services to manipulate 
            the data model
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.Configuration">
            <summary>
            returns the configuration of the addin
            new configuration items can be added
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.CurrentLanguage">
            <summary>
            Gets the language currently set in the application.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.AvailableLanguages">
            <summary>
            Gets the languages supported in the application.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.UserInterface">
            <summary>
            property that returns an UserInterfaceService that contains the services to interact
            with the PLC user interface or to create new user interface controls
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.CalculationTab">
            <summary>
            gets the calculation tab that contains all user interface interactions related to that particular part of the application
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.CockpitTab">
            <summary>
            gets the cockpit tab that contains all user interface interactions related to that particular part of the application
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.ProjectTab">
            <summary>
            gets the project tab that contains all user interface interactions related to that particular part of the application
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.CurrentUser">
            <summary>
            returns the current user that is locked in
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.AddInBase.#ctor">
            <summary>
            Base constructor for an Add-In
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.AddInBase.ConfigurationView">
            <summary>
            Gets or sets the configuration user interface for the Add-In.
            This can be used to provide some UI control needed to edit the configuration of the Add-In.
            The FramworkElement will be shown in the main application administration panel in the Add-In
            details page.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.AddInBase.PropertyChanged">
            <summary>
            event that can be raised when a certain property of the Add-In was changed
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.AddInBase.Setup">
            <summary>
            setup method that is being called right after the addin has been
            instantiated and main properties such as the calculation tab, configuration and languages have been set
            </summary>
            <returns>should return true with the setup was correct. 
            In case the setup failed it should return false and the add-in will not be activated.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.AddInBase.OnPropertyChanged(System.String)">
            <summary>
            raises an event that a certain property has changed
            </summary>
            <param name="propertyName">property that has been changed</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.AddInBase.GetExtensionData(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String[])">
            <summary>
            Allows to make get requests against service resources located in the server path
            [PLC-HOST]/extensibility/plc. The requested service must be an OData service (this
            will be checked by the Host-Application before requesting). The response is given as raw
            string and it's up to the AddIn developer to make sense from the delivered data.
            </summary>
            <param name="service">Exact name of the service</param>
            <param name="parameters">Potential parameters as key value pairs</param>
            <param name="segments">Resource segments that are added to the service name. <example>.../myservice.xsodata/segment1/segment2/...</example></param>
            <returns>The retrieved data as raw string.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.AddInBase.ProduceRequest(System.Net.Http.HttpMethod,System.String,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Allows to make get requests against plc standard services
            The response is given as raw string and it's up to the AddIn developer to make sense from the delivered data.
            </summary>
            <param name="httpMethod">Http method: GET, POST, PUT, DELETE</param>
            <param name="relativePath">Service relative path</param>
            <param name="objectToSend">Service Payload (in case of POST/PUT)</param>
            <param name="parameters">Potential parameters as key value pairs</param>
            <returns>The retrieved data as raw string.</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.AddInConstants">
            <summary>
             MAF defines the qualification data attributes which can be used to add meta data in form of key value pairs to an add-in.
             This kind of meta data can be retrieved without loading an add-in.
             </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.AddInConstants.AddInGuid">
            <summary>
            This constant should be used as the key for defining the add-in guid.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion">
            <summary>
            Represents a calculation version that is currently not opened for editing
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.CreatedBy">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.LastModifiedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.LastModifiedBy">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Id">
            <summary>
            gets id of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.RootItem">
            <summary>
            returns the root item of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Name">
            <summary>
            gets name of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.ComponentSplit">
            <summary>
            gets component split of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.CostingSheet">
            <summary>
            gets costing sheet of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Customer">
            <summary>
            gets customer
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.EndOfProduction">
            <summary>
            gets end of production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.IsFrozen">
            <summary>
            gets whether if it is frozen
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.MasterdataTimestamp">
            <summary>
            gets the master data time stamp
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.ReportCurrency">
            <summary>
            gets the report currency id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.SalesPrice">
            <summary>
            gets the sales price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.SalesPriceCurrency">
            <summary>
            gets the sales price currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.SalesDocument">
            <summary>
            gets the sales document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.StartOfProduction">
            <summary>
            gets the start of the production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.ValuationDate">
            <summary>
            gets the valuation date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Calculation">
            <summary>
            gets the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.ExchangeRateType">
            <summary>
            gets the exchange rate type
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Open">
            <summary>
            Opens the closed calculation version for editing
            </summary>
            <returns>in case of a success it returns the respective calculation version; in case the id does not exist or the operation fails, the Result will contain an error</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.DeleteOnBackendAsync">
            <inheritdoc />
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Calculation">
            <summary>
                class representing a calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.CurrentCalculationVersionId">
            <summary>
                gets id of the current calculation version Id
                Please do not use the property setter anymore. Use <see cref="M:Sap.Plc.AddIn.AddInView.Data.Calculation.SetCurrentCalculationVersionAsync(System.Int64)" /> instead.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.Id">
            <summary>
                get id of the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.Name">
            <summary>
                get/set name of the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.Project">
            <summary>
                gets the project of the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.CreatedBy">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.LastModifiedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Calculation.LastModifiedBy">
            <inheritdoc />
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Calculation.SetCurrentCalculationVersionAsync(System.Int64)">
            <summary>
                Sets the current version of this calculation.
                Prerequisites are:
                - the calculation has to be committed in the backend before
                - the version has to be committed in the backend before
                - the version is a child of this calculation
                - the version is not a life cycle version
                Please keep in mind that when a new calculation is created the implicit created version is already set as the
                current one.
            </summary>
            <param name="versionId">The id of the version that has to be set to current</param>
            <returns>A result object, indicating the success of the operation (<see cref="T:Sap.Plc.AddIn.AddInView.Data.Result" />).</returns>
            <exception cref="T:System.ArgumentNullException">it is not allowed to set the current version to null.</exception>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Calculation.GetCalculationVersionsAsync">
            <summary>
                Gets the a list of instances of <see cref="T:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion" /> that belong to that calculation.
                The list is requested from the backend.
                Before a version and its items can be changed it has to be opened (<seealso cref="M:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Open" />
                , <seealso cref="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Open(System.Int64)" />).
            </summary>
            <returns>a task with the request result containing the versions</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Calculation.GetCalculationAsync(System.Int64)">
            <summary>
            Gets an instance of <see cref="T:Sap.Plc.AddIn.AddInView.Data.Calculation"/> for the specified id
            </summary>
            <param name="calculationId">Id of the calculation to be loaded</param>
            <returns>
            Given the operation was successfull, the result is successfull and the result object contains the respective 
            calculation. If no calculation with the given id exists in the backend, the result will also be successfull
            but the result object will be null. Given any errors occured, the result contains the respective error messages.
            </returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Calculation.CreateOnBackendAsync">
            <inheritdoc />
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Calculation.DeleteOnBackendAsync">
            <inheritdoc />
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CalculationResult">
            <summary>
             Representation of a calculation result.
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.FixedPortion">
            <summary>
            Fixed portion of the calculation result.
            In order to determine if the value is used, check the value of the costing sheet IsTotalEnabled property and the value of the costing sheet row IsTotalEnabled property
            Example: CalculationResult[id].Total is used if CalculationVersion.CostingSheet[id].IsTotalCostEnabled == true AND CostingSheetRow[id].IsTotalCostEnabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.Total">
            <summary>
            Sum of fixed and variable
            In order to determine if the value is used, check the value of the costing sheet IsTotalEnabled property and the value of the costing sheet row IsTotalEnabled property
            Example: CalculationResult[id].Total is used if CalculationVersion.CostingSheet[id].IsTotalCostEnabled == true AND CostingSheetRow[id].IsTotalCostEnabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.VariablePortion">
            <summary>
            Variable portion of the calculation result.
            In order to determine if the value is used, check the value of the costing sheet IsTotalEnabled property and the value of the costing sheet row IsTotalEnabled property
            Example: CalculationResult[id].Total is used if CalculationVersion.CostingSheet[id].IsTotalCostEnabled == true AND CostingSheetRow[id].IsTotalCostEnabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.FixedPortion2">
            <summary>
            Fixed portion 2 of the calculation result.
            In order to determine if the value is used, check the value of the costing sheet IsTotal2Enabled property and the value of the costing sheet row IsTotal2Enabled property
            Example: CalculationResult[id].Total2 is used if CalculationVersion.CostingSheet[id].IsTotalCost2Enabled == true AND CostingSheetRow[id].IsTotalCost2Enabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.Total2">
            <summary>
            Sum of fixed 2 and variable 2
            In order to determine if the value is used, check the value of the costing sheet IsTotal2Enabled property and the value of the costing sheet row IsTotal2Enabled property
            Example: CalculationResult[id].Total2 is used if CalculationVersion.CostingSheet[id].IsTotalCost2Enabled == true AND CostingSheetRow[id].IsTotalCost2Enabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.VariablePortion2">
            <summary>
            Variable portion 2 of the calculation result.
            In order to determine if the value is used, check the value of the costing sheet IsTotal2Enabled property and the value of the costing sheet row IsTotal2Enabled property
            Example: CalculationResult[id].Total2 is used if CalculationVersion.CostingSheet[id].IsTotalCost2Enabled == true AND CostingSheetRow[id].IsTotalCost2Enabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.FixedPortion3">
            <summary>
            Fixed portion 3 of the calculation result.
            In order to determine if the value is used, check the value of the costing sheet IsTotal3Enabled property and the value of the costing sheet row IsTotal3Enabled property
            Example: CalculationResult[id].Total3 is used if CalculationVersion.CostingSheet[id].IsTotalCost3Enabled == true AND CostingSheetRow[id].IsTotalCost3Enabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.Total3">
            <summary>
            Sum of fixed 3 and variable 3
            In order to determine if the value is used, check the value of the costing sheet IsTotal3Enabled property and the value of the costing sheet row IsTotal3Enabled property
            Example: CalculationResult[id].Total3 is used if CalculationVersion.CostingSheet[id].IsTotalCost3Enabled == true AND CostingSheetRow[id].IsTotalCost3Enabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationResult.VariablePortion3">
            <summary>
            Variable portion 3 of the calculation result.
            In order to determine if the value is used, check the value of the costing sheet IsTotal3Enabled property and the value of the costing sheet row IsTotal3Enabled property
            Example: CalculationResult[id].Total3 is used if CalculationVersion.CostingSheet[id].IsTotalCost3Enabled == true AND CostingSheetRow[id].IsTotalCost3Enabled == true
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CalculationVersion">
            <summary>
            class that represents a calculation version
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.#ctor(System.String,System.String)">
            <summary>
            Creates a new calculation version in a new calculation. The new calculation is not created on the
            server, but only in memory. The new calculation version contains default values, as defined by
            the application user, and has the calculation linked. The initial version contains a root
            item, to which all additional items of the calculation must be added.
            </summary>
            <param name="projectId">The id of the project that should contain the new calculation. The project must already exists in the backend.</param>
            <param name="reportCurrencyId">The id of the report currency for the calculation version</param>
            <returns>The transient instance of the created calculation.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.#ctor(Sap.Plc.AddIn.AddInView.Data.Calculation)">
            <summary>
            Creates a new calculation version in the specified Calculation. The new calculation version is not created on the
            server, but only in memory. The new calculation version contains default values, as defined by
            the application user, and has the calculation linked. The initial version contains a root
            item, to which all aditional items of the calculation must be added.
            </summary>
            <param name="calculation">The calculation the new calculation version is created in</param>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.ComponentSplit">
            <summary>
            gets/sets component split of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.CostingSheet">
            <summary>
            gets/sets costing sheet of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Customer">
            <summary>
            gets/sets customer
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.EndOfProduction">
            <summary>
            gets/sets end of production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Name">
            <summary>
            gets/sets name of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.ReportCurrency">
            <summary>
            gets the report currency id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.RootItem">
            <summary>
            get the reference to the root item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.SalesDocument">
            <summary>
            gets sets the sales document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.SalesPrice">
            <summary>
            gets sets the sales price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.SalesPriceCurrency">
            <summary>
            gets the sales price currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.StartOfProduction">
            <summary>
            gets / sets the start of the production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Id">
            <summary>
            gets id of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.IsFrozen">
            <summary>
            gets whether if it is frozen
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.MasterdataTimestamp">
            <summary>
            gets the master data time stamp
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.ValuationDate">
            <summary>
            gets the valuation date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Calculation">
            <summary>
            gets the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Currencies">
            <summary>
            Available currencies for the calculation version. The dictionary uses the id of the
            currency as key and the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Currency"/> instance as value to ease the facilitate
            the access to a specific currency.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.UnitOfMeasures">
            <summary>
            Available unit of measures for the calculation version. The dictionary uses the id of the
            currency as key and the <see cref="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.UnitOfMeasures"/> instance as value to ease the
            facilitate the access to a specific unit of measure.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.ExchangeRateType">
            <summary>
            gets and sets the exchange rate type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.ActivityPriceStrategy">
            <summary>
            gets and sets the activity price strategy
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.MaterialPriceStrategy">
            <summary>
            gets and sets the material price strategy
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Status">
             <summary>
            gets and sets the status
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.CreatedBy">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.LastModifiedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.LastModifiedBy">
            <inheritdoc />
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.UpdateOnBackendAsync">
            <summary>
            Updates the calculation version
            </summary>
            <returns>Returns a task that will return a result object after completion</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.UpdateAllItemsOnBackendAsync">
            <summary>
            Updates all items of calculation version in backend.
            It is necessary that all items are already created in the backend, otherwise it will result in an error
            </summary>
            <returns>A task representing the asynchronous operation containing <see cref="T:Sap.Plc.AddIn.AddInView.Data.Result"/> object</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.UpdateMasterdataOnBackendAsync">
            <summary>
            Updates to current version of all master data referenced by this version.
            </summary>
            <returns>A result object, indicating the success of the operation.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.CreateAndReplaceAllItemsOnBackendAsync">
            <summary>
            Creates and replaces all items of calculation version in backend.
            It is a bulk operation.
            </summary>
            <returns>A task representing the asynchronous operation containing <see cref="T:Sap.Plc.AddIn.AddInView.Data.Result"/> object</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.SaveAsync">
            <summary>
            saves the calculation version from a temporary version that is being edited
            to a real version. The calculation version must exist already.
            </summary>
            <returns>A task representing the asynchronous operation containing <see cref="T:Sap.Plc.AddIn.AddInView.Data.Result"/> object</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.SaveAndFreezeAsync">
            <summary>
            saves the calculation version and then freezes it.
            </summary>
            <returns>Task with a Result object</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Open(System.Int64)">
            <summary>
            Opens the specified calculation version for editing
            </summary>
            <param name="calculationVersionId">Id of the calculation version to be opened</param>
            <returns>in case of a success it returns the respective calculation version; in case the id does not exist or the operation fails, the Result will contain an error</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.CreateOnBackendAsync">
            <summary>
            creates the calculation version asynchronously in the backend
            </summary>
            <returns>a task with the request result</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Close">
            <summary>
            closes the calculation version in the backend
            </summary>
            <returns>a task with the request result</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CockpitItem">
            <summary>
            This class represents the Cockpit Item from Cockpit Tab of the user interface. 
            It provides minimal informations about the select item in Cockpit Tab.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CockpitItem.ItemType">
            <summary>
            Type of Tree or List Item that is focused
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CockpitItem.ID">
            <summary>
            Unique Identifier of the focused item
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CockpitItemType">
            <summary>
            Represents the different C# types of the CockpitItem <see cref="T:Sap.Plc.AddIn.AddInView.Data.CockpitItem"/>.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CockpitItemType.Root">
            <summary>
            Item is Root
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CockpitItemType.Folder">
            <summary>
            Item is a Folder
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CockpitItemType.Project">
            <summary>
            Item is a Project
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CockpitItemType.Calculation">
            <summary>
            Item is a Calculation
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CockpitItemType.CalculationVersion">
            <summary>
            Item is a CalculationVersion
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CockpitItemType.LifecycleVersion">
            <summary>
            Item is a LifecycleVersion
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Config.Configuration">
            <summary>
            Add-In Configuration Information
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.Saved">
            <summary>
            event that gets fired when the data has been saved to the backend
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.Reloaded">
            <summary>
            event that gets fired when the configuration data has been reloaded
            from the backend
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.Items">
            <summary>
            Gets a list of configuration items.
            </summary>
            <value>The configuration items.</value>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.Version">
            <summary>
            Version of the add-in for which the configuration was entered.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.IsReadOnly">
            <summary>
            in case the current user has no right to modify the config it is set to read only
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.ReloadAsync">
            <summary>
            reloads the configuration from the backend
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Config.Configuration.Reset">
            <summary>
            resets the config to its last saved state
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Config.ConfigurationItem">
            <summary>
            Configuration Item to store some addin specific settings in the backend
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Config.ConfigurationItem.#ctor(System.String,System.String)">
            <summary>
            creates a new configuration item
            </summary>
            <param name="key">key of the item</param>
            <param name="value">value of the item</param>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Config.ConfigurationItem.Key">
            <summary>
            returns the item key
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Config.ConfigurationItem.Value">
            <summary>
            returns the item value
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CostItem">
            <summary>
            Class represents a item of a calculation version
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.#ctor(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.ItemCategory)">
            <summary>
            Creates a new cost item below the given parent cost item with the respective category.
            The cost item will not be created on the backend. It will only exist in the application.
            To persist the item CreateOnBackendAsync must be called.
            </summary>
            <param name="parentCostItem">parent cost item that this item should be added to</param>
            <param name="category">category of the item</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.#ctor(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory,Sap.Plc.AddIn.AddInView.Data.ItemPosition)">
            <summary>
            Creates a new cost item relative to the reference CostItem.
            The cost item will not be created on the backend. It will only exist in the application.
            To persist the item CreateOnBackendAsync must be called.
            </summary>
            <param name="targetCostItem">The item used to determine the parent</param>
            <param name="category">category of the item</param>
            <param name="insertPosition">The position r</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.#ctor(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory)">
            <summary>
            Creates a new cost item below the given parent cost item with the respective category.
            The cost item will not be created on the backend. It will only exist in the application.
            To persist the item CreateOnBackendAsync must be called.
            </summary>
            <param name="parentCostItem">parent cost item that this item should be added to</param>
            <param name="category">category of the item</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.#ctor(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.ItemCategory,Sap.Plc.AddIn.AddInView.Data.ItemPosition)">
            <summary>
            Creates a new cost item relative to the reference CostItem.
            The cost item will not be created on the backend. It will only exist in the application.
            To persist the item CreateOnBackendAsync must be called.
            </summary>
            <param name="targetCostItem">The item used to determine the parent</param>
            <param name="category">category of the item</param>
            <param name="insertPosition">The position r</param>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Id">
            <summary>
            get id of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ActivityType">
            <summary>
            get / set activity type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.BusinessArea">
            <summary>
            get /set business area of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Process">
            <summary>
            get/ set process of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Comment">
            <summary>
            get / set comment of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CompanyCode">
            <summary>
            get / set company code of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ConfidenceLevel">
            <summary>
            get / set confidence level of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CostCenter">
            <summary>
            get / set cost center of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Account">
            <summary>
            get / set account of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CostingLotSize">
            <summary>
            get / set costing lot size of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CostingLotSizeIsManual">
            <summary>
             get / set whether the costing lot size of the cost item is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CostingLotSizeUoM">
            <summary>
            get / set unit of measure for costing lot size of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Document">
            <summary>
            get set document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.DocumentPart">
            <summary>
            get set document part
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.DocumentType">
            <summary>
            get / set document type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.DocumentVersion">
            <summary>
            get / set document version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.DocumentStatus">
            <summary>
            get / set document status
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.LaboratoryDesignOffice">
            <summary>
            get / set Laboratory Design Office
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.EngineeringChangeNumberId">
            <summary>
            get / set engineering change number id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.IsActive">
            <summary>
            get / set if item is active
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.IsConfigurableMaterial">
            <summary>
            A material for which you can specify the characteristics during order processing
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.IsPhantomMaterial">
            <summary>
            if a material imported from SAP ERP is a phantom material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.IsRelevantToCostingInErp">
            <summary>
            get / set if item is relevant to costing in ERP
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.IsDisablingPriceDetermination">
            <summary>
            get / set if price determination is disabled
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.IsDisablingAccountDetermination">
            <summary>
            get / set if account determination is disabled
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ItemCategory">
            <summary>
            gets the item category
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CustomItemCategory">
             <summary>
            
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Description">
            <summary>
            get / set description
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Marking">
            <summary>
            get / set the marking/highlighting
            different values can be combined via bitmasking
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Material">
            <summary>
            gets the material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.MaterialGroup">
            <summary>
            gets the material group if no material is assigned to the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.MaterialType">
            <summary>
            gets the material type if no material is assigned to the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.MaterialPlant">
            <summary>
            gets/sets the material plant relation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.OtherCost">
            <summary>
            get set other cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.OtherCostFixedPortion">
            <summary>
            get / set other cost with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.OtherCostVariablePortion">
            <summary>
            get / set other cost with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Plant">
            <summary>
            gets the plant object
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Price">
            <summary>
            get price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceFixedPortion">
            <summary>
            get / set price with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceFixedPortionIsManual">
            <summary>
            get / set if price with fixed portion is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity">
            <summary>
            get price for total quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantityFixedPortion">
            <summary>
            get/set price for total quantity with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantityVariablePortion">
            <summary>
            get/set price for total quantity with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity2">
            <summary>
            get price for total quantity 2
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity2FixedPortion">
            <summary>
            get/set price for total quantity 2 with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity2VariablePortion">
            <summary>
            get/set price for total quantity 2 with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity3">
            <summary>
            get price for total quantity 3
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity3FixedPortion">
            <summary>
            get/set price for total quantity 3 with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceForTotalQuantity3VariablePortion">
            <summary>
            get/set price for total quantity 3 with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceSource">
            <summary>
            get price source
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceTransactionCurrency">
            <summary>
            get/set price transaction currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceUnit">
            <summary>
            get/set price unit
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceUnitIsManual">
            <summary>
            get / set if price unit is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceUnitUoM">
            <summary>
            get / set price unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceVariablePortion">
            <summary>
            get / set price variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceVariablePortionIsManual">
            <summary>
            get / set if price variable portion is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ProfitCenter">
            <summary>
            get / set profit center id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.QuantityDependencyMode">
            <summary>
            get /set quantity dependency mode
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalQuantityDependsOn">
            <summary>
            get /set quantity dependency mode
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.QuantityForOneAssembly">
            <summary>
            get / set quantity for one assembly
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.QuantityForOneAssemblyIsManual">
            <summary>
            get / set if quantity for one assembly is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.QuantityForOneAssemblyUoM">
            <summary>
            get / set quantity for one assembly unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TargetCost">
            <summary>
            get / set target cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TargetCostCurrency">
            <summary>
            get / set target cost currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TargetCostIsManual">
            <summary>
            get / set if target cost is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost">
            <summary>
            get total cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCostFixedPortion">
            <summary>
            get / set total cost fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCostVariablePortion">
            <summary>
            get / set total cost variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost2">
            <summary>
            get total cost2
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost2FixedPortion">
            <summary>
            get / set total cost 2 fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost2VariablePortion">
            <summary>
            get / set total cost 2 variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost3">
            <summary>
            get total cost 3
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost3FixedPortion">
            <summary>
            get / set total cost 3 fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalCost3VariablePortion">
            <summary>
            get / set total cost 3 variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalQuantity">
            <summary>
            get / set total quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalQuantityUoM">
            <summary>
            get / set total quantity unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Vendor">
            <summary>
            get / set vendor
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.WorkCenter">
            <summary>
            get / set work center
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CostingLotSizeCalculated">
            <summary>
            get / set costing lot size calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceFixedPortionCalculated">
            <summary>
            get / set the price fixed portion calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceVariablePortionCalculated">
            <summary>
            get / set price variable portion calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceUnitCalculated">
            <summary>
            get / set price unit calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.QuantityForOneAssemblyCalculated">
            <summary>
            get / set quantity for one assembly calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ReferencedCalculationVersion">
            <summary>
            get referenced calculation version
            To set the the referenced calculation version, use <see cref="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToReferenceVersionCategory(System.Int64)"/>
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TargetCostCalculated">
            <summary>
            get / set target cost calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalQuantityCalculated">
            <summary>
            get / set total quantity calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.TotalQuantityUoMCalculated">
            <summary>
            get / set total quantity unit of measure calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.OverheadGroup">
            <summary>
            get / set the overhead group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ValuationClass">
            <summary>
            get / set the valuation class
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PurchasingGroup">
            <summary>
            get / set the purchasing group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PurchasingDocument">
            <summary>
            get / set the purchasing document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.LocalContent">
            <summary>
            get / set local content of material price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ParentItem">
            <summary>
            gets the parent item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Children">
            <summary>
            gets the children cost items
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CalculationVersion">
            <summary>
            returns the calculation version
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToDocumentCategory">
            <summary>
            sets the item category to document
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToMaterialCategory">
            <summary>
            sets the item category to material
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToInternalActivityCategory">
            <summary>
            sets the item category to internal activity
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToExternalActivityCategory">
            <summary>
            sets the item category to external activity
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToProcessCategory">
            <summary>
            sets the item category to process
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToSubcontractingCategory">
            <summary>
            sets the item category to subcontracting
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToResourcesAndToolsCategory">
            <summary>
            sets the item category to resources and tools
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToVariableItemCategory">
            <summary>
            sets the item category to variable item
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToTextItemCategory">
            <summary>
            sets the item category to text item
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ChangeToReferenceVersionCategory(System.Int64)">
            <summary>
            Sets the item category to reference version. Immediately associates the given calculation version if it was already loaded.
            If not loaded, adds a placeholder object for a referenced calculation version with the given id (<see cref="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ReferencedCalculationVersion"/>).
            The placeholder object will be substituted with the "real" calculation version after the item was saved in the backend.
            </summary>
            <param name="calculationVersionId">the id of the calculation version that should be referenced</param>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CostingSheetResults">
            <summary>
            Holds the costing sheet split result for this item. Maps the id of the costing sheet row
            to the result for this group.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.ComponentSplitResults">
            <summary>
            Holds the component split result for this item. Maps the id of the account group to the result for this group.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.PriceAppliedSurcharge">
            <summary>
            gets the surcharge applied for a price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.Surcharge">
            <summary>
            gets the surcharge applied for a price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CustomFields">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.BaseQuantity">
            <summary>
            get / set the base quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.BaseQuantityCalculated">
            <summary>
            gets the calculated base quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.BaseQuantityIsManual">
            <summary>
            get or set if the base quantity should be a manual or calculated value
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.CreateOnBackendAsync">
            <summary>
            Creates the item in the backend if not created already.
            The create will not trigger the price determination and cost item calculation for performance reasons. In case the price determination
            is needed an additional UpdateOnBackendAsync is needed.
            </summary>
            <returns>a result object containing error messages or success state</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.UpdateOnBackendAsync">
            <summary>
            Updates the cost item in the backend and triggers the price determination and calculation of the cost items.
            </summary>
            <returns>a result object containing error messages or success state</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.DeleteOnBackendAsync">
            <summary>
            Deletes the item in the backend
            </summary>
            <returns>a result object containing error messages or success state</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.CreateAndReplaceAllChildrenOnBackendAsync">
            <summary>
            Creates and replaces all children and childrens children of this item.
            </summary>
            <returns>A result object of type <see cref="T:Sap.Plc.AddIn.AddInView.Data.Result"/> containing error messages or success state</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.ImportItems(System.String)">
            <summary>
            Imports a CSV file containing and items structure below the item or repalcing the item.
            This function is designed for a performante mass insert.
            Please refer to the documentation for the concrete CSV definition.
            </summary>
            <param name="csvString">the csv file as a string</param>
            <returns>a result object</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CostItem.CloneInto(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.ItemPosition)">
            <summary>
            creates a clone of this item at the target items specified position
            </summary>
            <param name="target">item to copy the item to</param>
            <param name="position">either below, above or as child</param>
            <returns>on success returns the CostItem that was cloned and inserted</returns>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.CreatedBy">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.LastModifiedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CostItem.LastModifiedBy">
            <inheritdoc />
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICockpitItem">
            <summary>
            interface for a cockpit item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICockpitItem.ItemType">
            <summary>
            get / set Type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICockpitItem.ID">
            <summary>
            get / set ID
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemReadOnlyBase.Marking">
            <summary>
            get the marking/highlighting
            different values can be combined via bit mask
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Id">
            <summary>
            get id of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.ActivityType">
            <summary>
            get / set activity type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.BusinessArea">
            <summary>
            get /set business area of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Process">
            <summary>
            get/ set process of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Comment">
            <summary>
            get / set comment of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.CompanyCode">
            <summary>
            get / set company code id of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.ConfidenceLevel">
            <summary>
            get / set confidence level of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.CostCenter">
            <summary>
            get / set cost center of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Account">
            <summary>
            get / set account of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.CostingLotSize">
            <summary>
            get / set costing lot size of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.CostingLotSizeIsManual">
            <summary>
             get / set whether the costing lot size of the cost item is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.CostingLotSizeUoM">
            <summary>
            get / set unit of measure for costing lot size of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Document">
            <summary>
            get set document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.DocumentPart">
            <summary>
            get set document part
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.DocumentType">
            <summary>
            get / set document type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.DocumentStatus">
            <summary>
            get / set document status
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.LaboratoryDesignOffice">
            <summary>
            get / set laboratory design office
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.DocumentVersion">
            <summary>
            get / set document version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.EngineeringChangeNumberId">
            <summary>
            get / set engineering change number id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.IsDisablingPriceDetermination">
            <summary>
            get / set if item has the price determination disabled
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.IsDisablingAccountDetermination">
            <summary>
            get /set if item account determination is disabled
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.IsConfigurableMaterial">
            <summary>
            A material for which you can specify the characteristics during order processing
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.IsPhantomMaterial">
            <summary>
            if a material imported from SAP ERP is a phantom material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.IsRelevantToCostingInErp">
            <summary>
            get / set if item is relevant to costing in ERP
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Marking">
            <summary>
            get / set the marking/highlighting
            different values can be combined via bit mask
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Material">
            <summary>
            gets the material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.MaterialGroup">
            <summary>
            gets the material group if no material is assigned to the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.MaterialType">
            <summary>
            gets the material type if no material is assigned to the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.MaterialPlant">
            <summary>
            gets/sets the material plant relation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.OtherCost">
            <summary>
            get set other cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.OtherCostFixedPortion">
            <summary>
            get / set other cost with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.OtherCostVariablePortion">
            <summary>
            get / set other cost with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Plant">
            <summary>
            gets the plant object
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Surcharge">
            <summary>
            get the surcharge applied for a price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceFixedPortion">
            <summary>
            get / set price with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceFixedPortionIsManual">
            <summary>
            get / set if price with fixed portion is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceForTotalQuantityFixedPortion">
            <summary>
            get/set price for total quantity with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceForTotalQuantityVariablePortion">
            <summary>
            get/set price for total quantity with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceTransactionCurrency">
            <summary>
            get/set price transaction currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceUnit">
            <summary>
            get/set price unit
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceUnitIsManual">
            <summary>
            get / set if price unit is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceUnitUoM">
            <summary>
            get / set price unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceVariablePortion">
            <summary>
            get / set price variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceVariablePortionIsManual">
            <summary>
            get / set if price variable portion is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.ProfitCenter">
            <summary>
            get / set profit center id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalQuantityDependsOn">
            <summary>
            get /set quantity dependency mode
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.QuantityForOneAssembly">
            <summary>
            get / set quantity for one assembly
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.QuantityForOneAssemblyIsManual">
            <summary>
            get / set if quantity for one assembly is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.QuantityForOneAssemblyUoM">
            <summary>
            get / set if quantity for one assembly unit of measure id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TargetCost">
            <summary>
            get / set target cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TargetCostCurrency">
            <summary>
            get / set target cost currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TargetCostIsManual">
            <summary>
            get / set if target cost is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalCostFixedPortion">
            <summary>
            get / set total cost fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalCostVariablePortion">
            <summary>
            get / set total cost variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalQuantity">
            <summary>
            get / set total quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalQuantityUoM">
            <summary>
            get / set total quantity unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.Vendor">
            <summary>
            get / set vendor id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.WorkCenter">
            <summary>
            get / set work center
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.CostingLotSizeCalculated">
            <summary>
            get / set costing lot size calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceFixedPortionCalculated">
            <summary>
            get / set the price fixed portion calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceVariablePortionCalculated">
            <summary>
            get / set price variable portion calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceUnitCalculated">
            <summary>
            get / set price unit calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.QuantityForOneAssemblyCalculated">
            <summary>
            get / set quantity for one assembly calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TargetCostCalculated">
            <summary>
            get / set target cost calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalQuantityCalculated">
            <summary>
            get / set total quantity calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalQuantityUoMCalculated">
            <summary>
            get / set total quantity unit of measure calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.OverheadGroup">
            <summary>
            get / set the overhead group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.ValuationClass">
            <summary>
            get / set the valuation class
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PurchasingGroup">
            <summary>
            get / set the purchasing group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PurchasingDocument">
            <summary>
            get / set the purchasing document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.LocalContent">
            <summary>
            get / set local content of material price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.BaseQuantity">
            <summary>
            get / set the base quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.BaseQuantityCalculated">
            <summary>
            gets the calculated base quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.BaseQuantityIsManual">
            <summary>
            get or set if the base quantity should be a manual or calculated value
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalCost2FixedPortion">
            <summary>
            get / set total cost fixed portion 2
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalCost2VariablePortion">
            <summary>
            get / set total cost variable portion 2
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceForTotalQuantity2FixedPortion">
            <summary>
            get/set price for total quantity with fixed portion 2
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceForTotalQuantity2VariablePortion">
            <summary>
            get/set price for total quantity with variable portion 2
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalCost3FixedPortion">
            <summary>
            get / set total cost fixed portion 3
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.TotalCost3VariablePortion">
            <summary>
            get / set total cost variable portion 3
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceForTotalQuantity3FixedPortion">
            <summary>
            get/set price for total quantity with fixed portion 3
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemBase.PriceForTotalQuantity3VariablePortion">
            <summary>
            get/set price for total quantity with variable portion 3
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICostItemChildList">
            <summary>
            A list of cost items that provides some special methods to delete cost items.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItemChildList.DeleteAllAsync">
            <summary>
            Deletes all items of that list locally as well as in the backend (when already saved).
            </summary>
            <returns>a result object containing error messages or success state</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItemChildList.DeleteAsync(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.CostItem[])">
            <summary>
            Deletes all passed items of that list locally as well as in the backend (when already saved).
            </summary>
            <param name="item">a single item that should be deleted</param>
            <param name="items">multiple items that should be deleted</param>
            <returns>result object containing error messages or success state</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CustomField">
            <summary>
            Interface of the CustomField.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.FieldName">
            <summary>
            Gets the custom field's name, which also serves as key in the 
            <see cref="P:Sap.Plc.AddIn.AddInView.Data.ICustomFieldsExtended.CustomFields"/> dictionary
            </summary>
            <value>The custom field's name.</value>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual">
            <summary>
            Gets and sets the switch of whether the formula-computed or the manually maintained value shall be used for calculations.
            </summary>
            <value>True if the manually maintained value shall be used. False if the formula-computed value shall be used.</value>  
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueUoM">
            <summary>
            Gets the custom field's unit of measure.
            </summary>
            <value>The unit of measure value</value>  
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueCurrency">
            <summary>
            Gets the custom field's currency.
            </summary>
            <value>The currency value.</value>  
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueDataType">
            <summary>
            Gets the custom field's data type.
            </summary>
            <value>The data type of the value.</value>  
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.Value">
            <summary>
            Gets and sets the manually maintained value as <see cref="T:System.Object"/>.
            </summary>
            <returns>The manually maintained value of the custom field.</returns>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueCalculated">
            <summary>
            Gets the formula computed value as <see cref="T:System.Object"/>.
            </summary>
            <returns>The formula computed value of the custom field.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CustomField.GetValueString">
            <summary>
            Gets the manually maintained or formula-computed value as <see cref="T:System.String"/>? depending on the state of <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual"/>.
            </summary>
            <returns>The manual / calculated value of the custom field.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CustomField.GetValueBoolean">
            <summary>
            Gets the manually maintained or formula-computed value as <see cref="T:System.Boolean"/>? depending on the state of <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual"/>.
            </summary>
            <returns>The manual / calculated value of the custom field.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CustomField.GetValueLong">
            <summary>
            Gets the manually maintained or formula-computed value as <see cref="T:System.Int64"/>? depending on the state of <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual"/>.
            </summary>
            <returns>The manual / calculated value of the custom field.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CustomField.GetValueDecimal">
            <summary>
            Gets the manually maintained or formula-computed value as <see cref="T:System.Decimal"/>? depending on the state of <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual"/>.
            </summary>
            <returns>The manual / calculated value of the custom field.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CustomField.GetValueDateTime">
            <summary>
            Gets the manually maintained or formula-computed value as <see cref="T:System.DateTime"/>? depending on the state of <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual"/>.
            </summary>
            <returns>The manual / calculated value of the custom field.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.CustomField.ToString">
            <summary>
            Converts the manually maintained or formula-computed value to <see cref="T:System.String"/> depending on the state of <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.ValueIsManual"/>.
            </summary>
            <returns>The manual / calculated value of the custom field as string.</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType">
            <summary>
            Represents the different C# types of the stored value of an <see cref="T:Sap.Plc.AddIn.AddInView.Data.CustomField"/>.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType.Unspecified">
            <summary>
            The stored Value is not a C# Type
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType.String">
            <summary>
            The stored Value is a <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType.NullableBoolean">
            <summary>
            The stored Value is a <see cref="T:System.Boolean"/>?
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType.NullableDecimal">
            <summary>
            The stored Value is a <see cref="T:System.Decimal"/>?
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType.NullableLong">
            <summary>
            The stored Value is a <see cref="T:System.Int64"/>?
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.CustomFieldDataType.NullableDateTime">
            <summary>
            The stored Value is a <see cref="T:System.DateTime"/>?
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IDataService">
            <summary>
            Interface of the DataService.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CostItemSelectionChanged">
            <summary>
            This event notifies about the change of selection in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CostItemChanged">
            <summary>
            This event notifies about the change of a cost item in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CostItemCreated">
            <summary>
            This event notifies about the creation of a new cost item in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CostItemDeleteRequested">
            <summary>
            This event notifies about the occurrence of a cost item delete request. The event is
            triggered before the item is deleted and gives the Add-In developer the opportunity to
            prevent the main application from deleting the cost item.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CostItemDeleted">
            <summary>
            This event notifies about the deletion of a cost item in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CostItemBranchModified">
            <summary>
            This event notifies about a change of a cost item that was triggered by a mass change like import or updated on all items
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationVersionChanged">
            <summary>
            This event notifies about the change of a calculation version (the version could belong to any calculation).
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationVersionSelectionChanged">
            <summary>
            This event notifies about the change in the selection of a calculation version (e.g. switching tabs, closing the last calculation version)
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationVersionSaveRequested">
            <summary>
            This event notifies about the occurrence of a calculation version save request. The event
            is triggered before the calculation version is saved and gives the Add-In developer the
            opportunity to prevent the main application from saving the version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationVersionSaved">
            <summary>
            This event notifies that a calculation version had been saved.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationVersionCloseRequested">
            <summary>
            This event notifies about the occurrence of a calculation version close request. The event
            is triggered before the calculation version is closed and gives the Add-In developer the
            opportunity to prevent the main application from closing the version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationVersionClosed">
            <summary>
            This event notifies that a calculation version had been closed.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.Data.IDataService.CalculationChanged">
            <summary>
            This event notifies about the change of a calculation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IDataService.SelectedCostItemInActiveVersion">
            <summary>
            This property gets the selected cost item in the currently active calculation version.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IDataService.FocusedCockpitItem">
            <summary>
            This property gets the focused cockpit item in Cockpit Tab.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IDataService.CurrentUser">
            <summary>
            This property gets the current user of the application.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.GetProjectsAsync">
            <summary>
            Asynchronous method that retrieves all existing projects
            </summary>
            <returns>
            An awaitable task containing a result object with an enumeration of the projects
            </returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.GetCalculationAsync(System.Int64)">
            <summary>
            Gets the specified calculation from the backend
            </summary>
            <param name="calculationId">Id of the calculation to be loaded</param>
            <returns>
            Given the operation was successfull, the result is successfull and the result object contains the respective
            calculation. If no calculation with the given id exists in the backend, the result will also be successfull
            but the result object will be null. Given any errors occured, the result contains the respective error messages.
            </returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.CreateCostItem(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.ItemCategory,Sap.Plc.AddIn.AddInView.Data.ItemPosition,Sap.Plc.AddIn.AddInView.Data.CostItem)">
            <summary>
            Creates a new cost item adaptation through the pipeline for the given CostItems instance.
            It will also set the Adapter in the given CostItem once the item has been created on the host side.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.CreateCostItem(Sap.Plc.AddIn.AddInView.Data.CostItem,Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory,Sap.Plc.AddIn.AddInView.Data.ItemPosition,Sap.Plc.AddIn.AddInView.Data.CostItem)">
            <summary>
            Creates a new cost item adaptation through the pipeline for the given CostItems instance.
            It will also set the Adapter in the given CostItem once the item has been created on the host side.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.SetSelectedCostItemInActiveVersion(System.Int64)">
            <summary>
            Sets the selection to a specific cost item in the active calculation version. The
            designated selected cost item is identified by its id.
            </summary>
            <param name="itemId">The id of the cost item that shall be selected.</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.GetExtensionData(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String[])">
            <summary>
            Allows to make get requests against service resources located in the server path
            [PLC-HOST]/sap/plc/extensibility. The requested service must be an OData service (this
            will be checked by the Host-Application before requesting). The response is given as raw
            string and it's up to the AddIn developer to make sense from the delivered data.
            </summary>
            <param name="service">Exact name of the service</param>
            <param name="parameters">Potential parameters as key value pairs</param>
            <param name="segments">Resource segments that are added to the service name. <example>.../myservice.xsodata/segment1/segment2/...</example></param>
            <returns>The retrieved data as raw string.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.ProduceRequest(System.Net.Http.HttpMethod,System.String,System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Allows to make get requests against plc standard services
            The response is given as raw string and it's up to the AddIn developer to make sense from the delivered data.
            </summary>
            <param name="httpMethod">Http method: GET, POST, PUT, DELETE</param>
            <param name="relativePath">Service relative path</param>
            <param name="objectToSend">Service Payload (in case of POST/PUT)</param>
            <param name="parameters">Potential parameters as key value pairs</param>
            <returns>The retrieved data as raw string.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IDataService.GetAddInConfigurationAsync(System.Guid,System.Version)">
            <summary>
            Asynchronous method to retrieve the configuration of the Add-In from the server.
            </summary>
            <returns>
            A awaitable task that contains the configuration when its execution was successfully
            finished. The returned request result could contain additional information given by the server.
            </returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IBackendCreatable">
            <summary>
            defines that an object can be created in the backend
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IBackendCreatable.CreateOnBackendAsync">
            <summary>
            method that must be implemented for asynchronous backend creation
            </summary>
            <returns>a task with the request result</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IBackendDeletable">
            <summary>
            defines that an object can be deleted in the backend
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IBackendDeletable.DeleteOnBackendAsync">
            <summary>
            method that must be implemented for asynchronous backend deletion
            </summary>
            <returns>a task with the request result</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IBackendUpdatable">
            <summary>
            defines that an object can be updated in the backend
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IBackendUpdatable.UpdateOnBackendAsync">
            <summary>
            method that must be implemented for asynchronous backend update
            </summary>
            <returns>a task with the request result</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICalculation">
            <summary>
                interface for a calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculation.CurrentCalculationVersionId">
            <summary>
                gets id of the current calculation version Id
                Please do not use the property setter anymore. Use <see cref="M:Sap.Plc.AddIn.AddInView.Data.ICalculation.SetCurrentCalculationVersionAsync(System.Int64)" /> instead.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculation.Id">
            <summary>
                get id of the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculation.Name">
            <summary>
                get/set name of the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculation.Project">
            <summary>
                gets the project of the calculation
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICalculation.SetCurrentCalculationVersionAsync(System.Int64)">
            <summary>
                Sets the current version of this calculation.
                Prerequisites are:
                - the calculation has to be committed in the backend before
                - the version has to be committed in the backend before
                - the version is a child of this calculation
                - the version is not a lifecycle version
                Please keep in mind that when a new calculation is created the implicit created version is already set as the
                current one.
            </summary>
            <param name="versionId">The id of the version that has to be set to current</param>
            <returns>A result object, indicating the success of the operation (<see cref="T:Sap.Plc.AddIn.AddInView.Data.Result" />).</returns>
            <exception cref="T:System.ArgumentNullException">it is not allowed to set the current version to null.</exception>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICalculation.GetCalculationVersionsAsync">
            <summary>
                Gets the a list of instances of <see cref="T:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion" /> that belong to that calculation.
                The list is requested from the backend.
                Before a version and its items can be changed it has to be opened (<seealso cref="M:Sap.Plc.AddIn.AddInView.Data.ClosedCalculationVersion.Open" />
                , <seealso cref="M:Sap.Plc.AddIn.AddInView.Data.CalculationVersion.Open(System.Int64)" />).
            </summary>
            <returns>a task with the request result containing the versions</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICalculationEventArgs">
            <summary>
            used as event arguments e.g. when a calculation has changed
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationEventArgs.Calculation">
            <summary>
            Calculation that was affected
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion">
            <summary>
            calculation version interface
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.ComponentSplit">
            <summary>
            gets/sets component split of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.CostingSheet">
            <summary>
            gets/sets costing sheet of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.Currencies">
            <summary>
            Available currencies for the calculation version. The dictionary uses the id of the
            currency as key and the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Currency"/> instance as value to ease the facilitate
            the access to a specific currency.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.Customer">
            <summary>
            gets/sets customer
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.EndOfProduction">
            <summary>
            gets/sets end of production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.Name">
            <summary>
            gets/sets name of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.ReportCurrency">
            <summary>
            gets the report currency id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.RootItem">
            <summary>
            get the reference to the root item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.SalesDocument">
            <summary>
            gets sets the sales document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.SalesPrice">
            <summary>
            gets sets the sales price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.SalesPriceCurrency">
            <summary>
            gets the sales price currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.StartOfProduction">
            <summary>
            gets / sets the start of the production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.UnitOfMeasures">
            <summary>
            Available unit of measures for the calculation version. The dictionary uses the id of the
            currency as key and the <see cref="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.UnitOfMeasures"/> instance as value to ease the
            facilitate the access to a specific unit of measure.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.ValuationDate">
            <summary>
            gets / sets the validation date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.ExchangeRateType">
            <summary>
            gets /sets the exchange rate type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.ActivityPriceStrategy">
            <summary>
            gets/sets the activity price strategy
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.MaterialPriceStrategy">
            <summary>
            gets/sets the material price strategy
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.Status">
            <summary>
            gets/sets the calculation version status
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.SaveAsync">
            <summary>
            saves the calculation version from a temporary version that is being edited
            to a real version. The calculation version must exist already.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.SaveAndFreezeAsync">
            <summary>
            Saves calculation version and then freezes calculation version and its lifecycle versions.
            </summary>
            <returns>A result object, indicating the success of the operation.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.UpdateAllItemsOnBackendAsync">
            <summary>
            Updates all items of calculation version in backend.
            It is necessary that all items are already created in the backend, otherwise it will result in an error
            </summary>
            <returns>A task representing the asynchronous operation containing <see cref="T:Result"/> object</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICalculationVersion.UpdateMasterdataOnBackendAsync">
            <summary>
            Updates to current version of all master data referenced by this version.
            </summary>
            <returns>A result object, indicating the success of the operation.</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase">
            <summary>
            Interface for the base of calculation versions
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.Id">
            <summary>
            gets id of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.Name">
            <summary>
            gets name of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.ComponentSplit">
            <summary>
            gets component split of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.CostingSheet">
            <summary>
            gets costing sheet of the calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.Customer">
            <summary>
            gets customer
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.EndOfProduction">
            <summary>
            gets end of production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.IsFrozen">
            <summary>
            gets whether if it is frozen
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.MasterdataTimestamp">
            <summary>
            gets the master data time stamp
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.ReportCurrency">
            <summary>
            gets the report currency id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.SalesPrice">
            <summary>
            gets the sales price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.SalesPriceCurrency">
            <summary>
            gets the sales price currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.SalesDocument">
            <summary>
            gets the sales document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.StartOfProduction">
            <summary>
            gets the start of the production date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.ValuationDate">
            <summary>
            gets the valuation date
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.Calculation">
            <summary>
            gets the calculation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.ExchangeRateType">
            <summary>
            gets the exchange rate type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.ActivityPriceStrategy">
            <summary>
            gets the activity price strategy
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.MaterialPriceStrategy">
            <summary>
            gets the material price strategy
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionBase.Status">
             <summary>
            
             </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionDeclinableRequestEventArgs">
            <summary>
            calculation version events arguments that can be declined
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionEventArgs">
            <summary>
            calculation version related event arguments
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICalculationVersionEventArgs.CalculationVersion">
            <summary>
            calculation version that was affected
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICostItem">
            <summary>
            interface for a cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.IsActive">
            <summary>
            get / set if item is active
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.ItemCategory">
            <summary>
            gets the item category
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.CustomItemCategory">
            <summary>
            gets the custom item category
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.Description">
            <summary>
            get / set description
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.ParentItem">
            <summary>
            gets the parent item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.Children">
            <summary>
            gets the children cost items
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.ReferencedCalculationVersion">
            <summary>
            get referenced calculation version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.CalculationVersion">
            <summary>
            returns the calculation version
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToDocumentCategory">
            <summary>
            sets the item category to document
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToMaterialCategory">
            <summary>
            sets the item category to material
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToInternalActivityCategory">
            <summary>
            sets the item category to internal activity
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToExternalActivityCategory">
            <summary>
            sets the item category to external activity
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToProcessCategory">
            <summary>
            sets the item category to process
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToSubcontractingCategory">
            <summary>
            sets the item category to subcontracting
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToResourcesAndToolsCategory">
            <summary>
            sets the item category to resources and tools
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToVariableItemCategory">
            <summary>
            sets the item category to variable item
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToTextItemCategory">
            <summary>
            sets the item category to text item
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeItemCategory(Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory)">
            <summary>
            changes the item category to the specified item category
            </summary>
            <param name="newItemCategory">the item category to change to</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.ICostItem.ChangeToReferenceVersionCategory(System.Int64)">
            <summary>
            Sets the item category to reference version. Immediately associates the given calculation version if it was already loaded.
            If not loaded, adds a placeholder object for a referenced calculation version with the given id (<see cref="P:Sap.Plc.AddIn.AddInView.Data.ICostItem.ReferencedCalculationVersion"/>).
            The placeholder object will be substituted with the "real" calculation version after the item was saved in the backend.
            </summary>
            <param name="calculationVersionId">the id of the calculation version that should be referenced</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICostItemDeclinableRequestEventArgs">
            <summary>
            cost item related events arguments that can be declined
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICostItemEventArgs">
            <summary>
            cost item related event arguments
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICostItemEventArgs.CostItem">
            <summary>
            gets the cost item
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IDeclinableRequestEventArgs">
            <summary>
            events arguments for a request that can be declined
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IDeclinableRequestEventArgs.RequestDeclined">
            <summary>
            gets / sets the declined state
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IProject">
            <summary>
                interface for a project
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IProject.ControllingArea">
            <summary>
                gets id of the controlling area
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IProject.EndOfProject">
            <summary>
                gets the date of project end
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IProject.Id">
            <summary>
                gets the id of the project
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IProject.Name">
            <summary>
                gets the name
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IProject.ProjectResponsible">
            <summary>
                gets the name of the project responsible
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IProject.StartOfProject">
            <summary>
                gets the date of project end
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.IProject.GetCalculationsAsync">
            <summary>
                Gets the a list of instances of <see cref="T:Sap.Plc.AddIn.AddInView.Data.Calculation" /> that belong to that project.
                The list is requested from the backend.
            </summary>
            <returns>a task with the request result containing the calculation</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IClosedCalculationVersion">
            <summary>
            Interface for a calculation version that is not opened
            </summary>
            <remarks>
            In the current state the interface does not provide additional properties to <see cref="T:ICalculationVersionBase"/>.
            But for later changes and intuitive usage it is already provided.
            </remarks>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ItemCategory">
            <summary>
            defines possible item categories
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.CalculationVersion">
            <summary>
            item of type calculation version
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.Document">
            <summary>
            item of type calculation document
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.Material">
            <summary>
            item of type material
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.InternalActivity">
            <summary>
            item of type internal activity
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.ExternalActivity">
            <summary>
            item of type external activity
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.Process">
            <summary>
            item of type process
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.Subcontracting">
            <summary>
            item of type subcontracting
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.ResourcesAndTools">
            <summary>
            item of type resources and tools
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.VariableItem">
            <summary>
            item of type variable item
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.TextItem">
            <summary>
            item of text type
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemCategory.ReferencedVersion">
            <summary>
            item of type referenced version
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.IAudit">
            <summary>
            common backend information about objects to keep track who created which object at what time 
            and who this the recent update at what time
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IAudit.CreatedAt">
            <summary>
            gets the date time when the object was created
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IAudit.CreatedBy">
            <summary>
            gets the user id that created the object
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IAudit.LastModifiedAt">
            <summary>
            gets the date when it was updated the last time
            </summary>     
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.IAudit.LastModifiedBy">
            <summary>
            gets the id of the user who made the most recent update
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ItemPosition">
            <summary>
            position where the item should be inserted
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemPosition.Before">
            <summary>
            before the item
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemPosition.After">
            <summary>
            after the item
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.ItemPosition.AsChild">
            <summary>
            in the child item collection
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Marking">
            <summary>
            Defines possible values for the marks/highlights on data model entities.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Marking.None">
            <summary>
            Indicates that the containing entity is not marked/highlighted.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Marking.Yellow">
            <summary>
            Indicates that the containing entity highlighted in yellow.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Marking.Green">
            <summary>
            Indicates that the containing entity highlighted in green.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Marking.Orange">
            <summary>
            Indicates that the containing entity highlighted in orange.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Account">
            <summary>
            Account master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Account.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="controllingArea">The controlling area as part of the key</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Account"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Account.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Account"/> #A1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#A1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Account"/> s that start with #A1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#A1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#A1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ActivityType">
            <summary>
            Activity type master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ActivityType.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="controllingArea">The controlling area as part of the key</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ActivityType"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ActivityType.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ActivityType"/> #A1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#A1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ActivityType"/> s that start with #A1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#A1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#A1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.BusinessArea">
            <summary>
            Business area master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.BusinessArea.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.BusinessArea"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.BusinessArea.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.BusinessArea"/> #B1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#B1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheetRow">
            <summary>
            Represents a costing sheet row
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheetRow.IsTotalCostEnabled">
            <summary>
            Gets if the total cost is enabled. This value must be used in relation with the calculation version's costing sheet IsTotalCostEnabled property in order to determine if the total cost value of the costing sheet result is used or not.
            Example: CalculationResult[id].Total is used if CalculationVersion.CostingSheet[id].IsTotalCostEnabled == true AND CostingSheetRow[id].IsTotalCostEnabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheetRow.IsTotalCost2Enabled">
            <summary>
            Gets if the total cost 2 is enabled. This value must be used in relation with the calculation version's costing sheet IsTotalCost2Enabled property in order to determine if the total cost value of the costing sheet result is used or not.
            Example: CalculationResult[id].Total2 is used if CalculationVersion.CostingSheet[id].IsTotalCost2Enabled == true AND CostingSheetRow[id].IsTotalCost2Enabled == true
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheetRow.IsTotalCost3Enabled">
            <summary>
            Gets if the total cost 3 is enabled. This value must be used in relation with the calculation version's costing sheet IsTotalCost3Enabled property in order to determine if the total cost value of the costing sheet result is used or not.
            Example: CalculationResult[id].Total3 is used if CalculationVersion.CostingSheet[id].IsTotalCost3Enabled == true AND CostingSheetRow[id].IsTotalCost3Enabled == true
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory">
            <summary>
            The type of custom item category. An ItemCategory is used as a template
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory.Icon">
            <summary>
            The unicode representation of the icon. Use 'SAP-Icons' font to render the icon.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory.Name">
            <summary>
            The translated, optional name of the custom item category.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory.Template">
            <summary>
            The template used to create the item category.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory.CreatePlaceholder(System.String)">
            <summary>
            Creates a placeholder object.
            </summary>
            <param name="id">Id of the placeholder, in this case, the Code property of the Custom Item Category</param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory"/> instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory.SearchAsync(System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the master data time stamp.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory"/>.
            </summary>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CustomItemCategory"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync(DateTime.Now.Date.AddMonths(-2));
            </code>
            //get all item categories:
            <code>
            SearchAsync();
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ExchangeRateType">
            <summary>
            class represents the
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ExchangeRateType.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">the id of the placeholder</param>
            <param name="calculationVersion">The calculation version within its context the created instance shall be used. This version is used to resolve locally stored instances if possible.</param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ExchangeRateType"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ExchangeRateType.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ExchangeRateType"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy">
            <summary>
            Class that holds the price determination sequence
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.SourceType">
            <summary>
            type of source eg.g if the price is calculated or a manual set price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.DeterminationSequence">
            <summary>
            determination sequence
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.SpecificPrioritySequence">
            <summary>
            Rule sequence for specfic price determination
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.IsVendorGenericFilter">
            <summary>
            Flag for price determination with vendor generic filter
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.IsVendorValueFilter">
            <summary>
            Flag for price determination with vendor value filter
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.SourceType,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object. Note: this only resolves locally stored instances and does not yet create temporary items.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="sourceType">The source type of the placeholder as part of its key.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.</param>
            <returns></returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.PriceDeterminationStrategy.SearchAsync(System.String,System.Nullable{System.DateTime})">
             <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
             </summary>
             <param name="masterDataTimeStamp"></param>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Process">
            <summary>
            Business process master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Process.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="controllingArea">The controlling area as part of the key</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Process"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Process.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Process"/> #P1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#P1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Process"/> s that start with #P1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#P1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#P1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.CompanyCode">
            <summary>
            Company code master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CompanyCode.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CompanyCode"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CompanyCode.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CompanyCode"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CompanyCode"/> s that start with #C1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#C1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#C1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ComponentSplit">
            <summary>
            Component split master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ComponentSplit.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ComponentSplit"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ComponentSplit.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ComponentSplit"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ComponentSplit"/> s that start with #C1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#C1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#C1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ConfidenceLevel">
            <summary>
            confidence level
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.ConfidenceLevel.VeryLow">
            <summary>
            very low
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.ConfidenceLevel.Low">
            <summary>
            low
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.ConfidenceLevel.Medium">
            <summary>
            medium
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.ConfidenceLevel.High">
            <summary>
            high
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.ConfidenceLevel.VeryHigh">
            <summary>
            very high
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea">
            <summary>
            Controlling area master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Currency"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#CA1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> s that start with #CA1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Currency"/> USD:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#CA1*", null, null, currencyUSD);
            //alternatively use named parameter
            SearchAsync("#CA1*", filter: currencyUSD);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter">
            <summary>
            Cost center master data
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter.CustomFields">
            <summary>
            gets the custom fields
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="controllingArea">The controlling area as part of the key</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CostCenter"/> s that start with #C1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#C1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#C1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet">
            <summary>
            Costing sheet master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet"/> s that start with #C1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#C1*", null, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#C1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.IsTotalCostEnabled">
             <summary>
            Determines if the total cost value is used or not
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.IsTotalCost2Enabled">
             <summary>
            Determines if the total cost 2 value is used or not
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.TotalCost2Description">
             <summary>
            Gets the localized description of the total cost 2
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.IsTotalCost3Enabled">
             <summary>
            Determines if the total cost 3 value is used or not
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.TotalCost3Description">
             <summary>
            Gets the localized description of the total cost 3
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.CostingSheet.CostingSheetRows">
             <summary>
            Gets the costing sheet rows
             </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Currency">
            <summary>
            Representation of a currency.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Currency.Name">
            <summary>
            The currency name.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Currency.DecimalsDisplayed">
            <summary>
            The number of decimals displayed for the currency.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Currency.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Currency"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Customer">
            <summary>
            Customer master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Customer.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Customer"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Customer.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Customer"/> #C1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#C1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType">
            <summary>
            The type of the dimension.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.None">
            <summary>
            No dimension type defined.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Length">
            <summary>
            Length dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Area">
            <summary>
            Area dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Volume">
            <summary>
            Volume dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Mass">
            <summary>
            Mass dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Density">
            <summary>
            Density dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Time">
            <summary>
            Time dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Energy">
            <summary>
            Energy dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Storage">
            <summary>
            Storage dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Frequency">
            <summary>
            Frequency dimension type.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.DimensionType.Temperature">
            <summary>
            Temperature dimension type.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Document">
            <summary>
            Document master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Document.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.DocumentType,System.String,System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="type">The document type of the placeholder as part of its key.</param>
            <param name="version">The version of the placeholder as part of its key.</param>
            <param name="part">The document part of the placeholder as part of its key.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Document"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Document.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Document"/> #D1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#D1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Document"/> s that start with #D1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType"/> #DT1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#D1*", null, null, documentTypeDT1);
            //alternatively use named parameter
            SearchAsync("#D1*", filter: documentTypeDT1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentStatus">
            <summary>
            Document status master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.DocumentStatus.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.DocumentType,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="type">The document type of the placeholder as part of its key.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentStatus"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.DocumentStatus.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentStatus"/> #D1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#D1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentStatus"/> s that start with #D1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType"/> #DT1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#D1*", null, null, documentTypeDT1);
            //alternatively use named parameter
            SearchAsync("#D1*", filter: documentTypeDT1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType">
            <summary>
            Document type master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.DocumentType"/> #D1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#D1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.LaboratoryDesignOffice">
            <summary>
            Laboratory Design Office
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.LaboratoryDesignOffice.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.LaboratoryDesignOffice"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.LaboratoryDesignOffice.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.LaboratoryDesignOffice"/> #D1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#D1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Language">
            <summary>
            Represents a language.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Language.Code">
            <summary>
            The language identifier code. 
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Language.TextsMaintainable">
            <summary>
            Indicates if texts are maintainable for this language.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.LanguageCollection">
            <summary>
            Represents a collection of <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Language"/> objects.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.LanguageCollection.Item(System.String)">
            <summary>
            Gets the language with the specified language code. Returns null if no applicable language was found.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Localization">
            <summary>
            A pairing of <see cref="P:Sap.Plc.AddIn.AddInView.Data.Master.Localization.Language"/> and <see cref="P:Sap.Plc.AddIn.AddInView.Data.Master.Localization.String"/> that represents a localized string for that particular language./>
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Localization.Language">
            <summary>
            The language.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Localization.String">
            <summary>
            The localized string.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata">
            <summary>
            General master data class.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata.Id">
            <summary>
            Id of the master data entity.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata.Description">
            <summary>
            Description text of the master data entity.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata.CreatedAt">
            <summary>
            gets the date time when the object was created
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata.CreatedBy">
            <summary>
            gets the user id that created the object
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata.LastModifiedAt">
            <summary>
            gets the date when it was updated the last time
            </summary>        
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Masterdata.LastModifiedBy">
            <summary>
            gets the id of the user who made the most recent update
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Material">
            <summary>
            Material class
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.CustomFields">
            <summary>
            gets the custom fields
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.Group">
            <summary>
            group the material belongs to
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.Type">
            <summary>
            type of material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.BaseUoM">
            <summary>
            basic unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.IsConfigurableMaterial">
            <summary>
            A material for which you can specify the characteristics during order processing
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.IsCreatedViaCadIntegration">
            <summary>
            whether a material was created or changed in a CAD system
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Material.IsPhantomMaterial">
            <summary>
            if a material imported from SAP ERP is a phantom material
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Material.CreateBuilder(System.String)">
            <summary>
            Creates a builder object that allows to create new Materials.
            </summary>
            <param name="id">The id of the material to create</param>
            <returns>The builder object.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Material.CreateOnBackendAsync">
            <summary>
            Creates the material as new master data in the PLC back-end.
            </summary>
            <returns>A task indicating when the operation is finished and the created material as payload.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Material.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/> #M1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#M1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/> s that start with #M1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType"/> #MT1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#M1*", null, null, materialTypeMT1);
            //alternatively use named parameter
            SearchAsync("#M1*", filter: materialTypeMT1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder">
            <summary>
            Builder for new materials.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetId(System.String)">
            <summary>
            Sets the Id of the new Material
            </summary>
            <param name="id">The id to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetDescription(System.String)">
            <summary>
            Sets the description of the new Material.
            </summary>
            <param name="description">The description to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetDescription(System.String,Sap.Plc.AddIn.AddInView.Data.Master.Language)">
            <summary>
            Sets the language-specific description of the new Material
            </summary>
            <param name="description">The language-specific description to be set.</param>
            <param name="language">The language.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
            <remarks>See <see cref="P:Sap.Plc.AddIn.AddInView.AddInBase.AvailableLanguages"/> in <see cref="T:Sap.Plc.AddIn.AddInView.AddInBase"/>.</remarks>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetGroup(Sap.Plc.AddIn.AddInView.Data.Master.MaterialGroup)">
            <summary>
            Sets the material group of the new Material
            </summary>
            <param name="group">The group to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetType(Sap.Plc.AddIn.AddInView.Data.Master.MaterialType)">
            <summary>
            Sets the material type of the new Material
            </summary>
            <param name="type">The type to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetBaseUoM(Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure)">
            <summary>
            Sets the base unit of measure of the new Material
            </summary>
            <param name="uom">The unit of measure to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetIsConfigurableMaterial(System.Boolean)">
            <summary>
            Sets if this is a configurable material.
            </summary>
            <param name="value">True if this material is configurable</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetIsCreatedViaCadIntegration(System.Boolean)">
            <summary>
            Sets if this is created via a CAD integration.
            </summary>
            <param name="value">True if this material is created via CAD integration.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.SetIsPhantomMaterial(System.Boolean)">
            <summary>
            Sets if this is a phantom material.
            </summary>
            <param name="value">True if this material a phantom material.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialBuilder.Build">
            <summary>
            Create a new <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/> without saving it as master data on the PLC
            back-end. It can be assigned to one or more <see cref="T:Sap.Plc.AddIn.AddInView.Data.CostItem"/>s, but will only
            valid for there.
            </summary>
            <returns>The created (temporary) material.</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialGroup">
            <summary>
            Material group master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialGroup.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialGroup"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialGroup.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialGroup"/> #M1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#M1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation">
            <summary>
            Class that contains attributes for the relation of material and plant. Those attributes are:
            costing lot size, overhead group and valuation class)
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.CustomFields">
            <summary>
            gets the custom fields
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.CostingLotSize">
            <summary>
            The costing lot size of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.CostingLotSizeUoM">
            <summary>
            The costing lot size unit of measure of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.LotSize">
            <summary>
            The costing lot size of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.LotSizeUoM">
            <summary>
            The costing lot size unit of measure of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.Material">
            <summary>
            The material of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.OverheadGroup">
            <summary>
            The overhead group of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.Plant">
            <summary>
            The plant of the relation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.ValuationClass">
            <summary>
            The valuation class of the relation.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.CreateOnBackendAsync">
            <summary>
            Creates the material plant relation as new master data in the PLC back-end.
            </summary>
            <returns>A task indicating when the operation is finished and the created material as payload.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.CreateBuilder(Sap.Plc.AddIn.AddInView.Data.Master.Material,Sap.Plc.AddIn.AddInView.Data.Master.Plant)">
            <summary>
            Creates a builder object that allows to create new Material Plant Relations.
            </summary>
            <param name="material">The material of the relation as part of it's key</param>
            <param name="plant">The plant of the relation as part of it's key</param>
            <returns>The builder object.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation.SearchAsync(System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id and the master data
            time stamp. The optional <paramref name="filter"/> defines additional MasterData objects to narrow down
            the search results to the referenced MasterData IDs. Those IDs can include a * to designate a wild card search.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> and <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/>.
            </summary>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation"/> s that have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/> s start with M1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> #PT1:
            <code>
            var materialM1 = Material.CreateBuilder("M1*").Build();
            var plantPT1 = Plant.CreateBuilder("#PT1").Build();
            //explicitly set masterDataTimestamp to null
            SearchAsync(null, materialM1, plantPT1);
            //alternatively use named parameter
            SearchAsync(filter: new [] { materialM1, plantPT1});
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder">
            <summary>
            Builder for new materials plant relations
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetMaterial(Sap.Plc.AddIn.AddInView.Data.Master.Material)">
            <summary>
            Sets the material of the relation
            </summary>
            <param name="material">The material to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetPlant(Sap.Plc.AddIn.AddInView.Data.Master.Plant)">
            <summary>
            Sets the plant of the relation
            </summary>
            <param name="plant">The plant to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetOverheadGroup(Sap.Plc.AddIn.AddInView.Data.Master.OverheadGroup)">
            <summary>
            Sets the overhead group of the relation
            </summary>
            <param name="overheadGroup">The overhead group to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetValuationClass(Sap.Plc.AddIn.AddInView.Data.Master.ValuationClass)">
            <summary>
            Sets the valuation class of the relation
            </summary>
            <param name="valuationClass">The valuation class to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetLotSize(System.Nullable{System.Decimal})">
            <summary>
            Sets the costing lot size of the relation
            </summary>
            <param name="costingLotSize">The costing lot size to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetCostingLotSize(System.Nullable{System.Decimal})">
            <summary>
            Sets the costing lot size of the relation
            </summary>
            <param name="costingLotSize">The costing lot size to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetCostingLotSizeUoM(Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure)">
            <summary>
            Sets the unit of measure for the costing lot size of the relation
            </summary>
            <param name="uom">The unit of measure to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.SetLotSizeUoM(Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure)">
            <summary>
            Sets the unit of measure for the costing lot size of the relation
            </summary>
            <param name="uom">The unit of measure to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelationBuilder.Build">
            <summary>
            Create a new <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPlantRelation"/> without saving it as master data on the PLC
            back-end. It can be assigned to one or more <see cref="T:Sap.Plc.AddIn.AddInView.Data.CostItem"/>s, but will only
            valid for there.
            </summary>
            <returns>The created (temporary) material.</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice">
            <summary>
            class that represents the price attributes of a material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.CustomFields">
            <summary>
            gets the custom fields
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PriceSource">
            <summary>
            Source of the price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.Material">
            <summary>
            material part of the relation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.Plant">
            <summary>
            a price can be plant specific so the plant relation can exist
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.Vendor">
            <summary>
            a price for a material can be vendor specific
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.Project">
            <summary>
            a price can be project specific
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.Customer">
            <summary>
            a price can be customer specific
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.ValidFromAssignment">
            <summary>
            a price always has a data from which it will be valid
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PurchasingGroup">
            <summary>
            purchasing group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PurchasingDocument">
            <summary>
            purchasing document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.LocalContent">
            <summary>
            local content
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.ValidToAssignment">
            <summary>
            the date until the price is valid
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PriceFixedPortion">
            <summary>
            PriceFixedPortion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PriceVariablePortion">
            <summary>
            PriceVariablePortion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.TransactionCurrency">
            <summary>
            TransactionCurrency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PriceUnit">
            <summary>
            PriceUnit
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.PriceUnitUoM">
            <summary>
            PriceUnitUoM
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.CreateBuilder(Sap.Plc.AddIn.AddInView.Data.Master.PriceSource,Sap.Plc.AddIn.AddInView.Data.Master.Material)">
            <summary>
            Creates a builder object that allows to create new Material Prices.
            </summary>
            <param name="priceSource">The price source of the relation as part of it's key</param>
            <param name="material">The material of the relation as part of it's key</param>
            <returns>The builder object.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.CreateOnBackendAsync">
            <summary>
            Creates the material price as new master data  in the PLC back-end.
            </summary>
            <returns>A task indicating when the operation is finished and the created material as payload.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.SearchAsync(System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id and the master data
            time stamp. The optional <paramref name="filter"/> defines additional MasterData objects to narrow down
            the search results to the referenced MasterData IDs. Those IDs can include a * to designate a wild card search.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> and <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/>.
            </summary>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice"/> s that have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Material"/> s start with M1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> #PT1:
            <code>
            var materialM1 = Material.CreateBuilder("M1*").Build();
            var plantPT1 = Plant.CreateBuilder("#PT1").Build();
            //explicitly set masterDataTimestamp to null
            SearchAsync(null, materialM1, plantPT1);
            //alternatively use named parameter
            SearchAsync(filter: new [] { materialM1, plantPT1});
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder">
            <summary>
            Builder for new material prices.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetProject(Sap.Plc.AddIn.AddInView.Data.Project)">
            <summary>
            Set the project of the material price
            </summary>
            <param name="project">the project</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPlant(Sap.Plc.AddIn.AddInView.Data.Master.Plant)">
            <summary>
            Set the plant of the material price
            </summary>
            <param name="plant">the plant</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetCustomer(Sap.Plc.AddIn.AddInView.Data.Master.Customer)">
            <summary>
            Set the customer of the material price
            </summary>
            <param name="customer">the customer</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetVendor(Sap.Plc.AddIn.AddInView.Data.Master.Vendor)">
            <summary>
            Set the vendor of this material price.
            </summary>
            <param name="vendor">The vendor</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetValidFromAssignment(System.DateTime)">
            <summary>
            Set the begin of the validity for this material price.
            </summary>
            <param name="validFrom">Time stamp of the start point of validity.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPurchasingGroup(System.String)">
            <summary>
            Sets the purchasing document of this material price.
            </summary>
            <param name="group">The purchasing group identifier.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPurchasingDocument(System.String)">
            <summary>
            Set the purchasing document of the material price.
            </summary>
            <param name="doc">The document identifier.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetLocalContent(System.Decimal)">
            <summary>
            Sets the local content of the material price.
            </summary>
            <param name="content">The local content.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetValidToAssignment(System.DateTime)">
            <summary>
            Sets the end of the validity of the material price.
            </summary>
            <param name="validTo">Time stamp of the end point of validity.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPriceFixedPortion(System.Decimal)">
            <summary>
            Sets the fixed portion of the material price.
            </summary>
            <param name="priceFixed">The fixed portion.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPriceVariablePortion(System.Decimal)">
            <summary>
            Set the variable portion of the material price.
            </summary>
            <param name="priceVariable">The variable portion.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetTransactionCurrency(Sap.Plc.AddIn.AddInView.Data.Master.Currency)">
            <summary>
            Sets the transaction currency for the material price.
            </summary>
            <param name="transactionCurrency">The currency to be set.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPriceUnit(System.Decimal)">
            <summary>
            Sets the price unit for the material price.
            </summary>
            <param name="unit">The unit to be set.</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.SetPriceUnitUoM(Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure)">
            <summary>
            Sets unit of measure for the price unit.
            </summary>
            <param name="uom">The unit of measure to be set</param>
            <returns>The instance of the builder to allow method chaining.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPriceBuilder.Build">
            <summary>
            Create a new <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice"/> without saving it as master data on the PLC
            back-end. In order to save it to the PLC back-end use <see cref="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialPrice.CreateOnBackendAsync"/>
            </summary>
            <returns>The created (temporary) material price.</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType">
            <summary>
            Material type master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.MaterialType"/> #M1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#M1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.OverheadGroup">
            <summary>
            OverheadGroup master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.OverheadGroup.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.Plant,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="plant">The plant as part of the key</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Account"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.OverheadGroup.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to a specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.OverheadGroup"/> #H1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#H1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.OverheadGroup"/> s that start with #H1 and have <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> #PT1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#H1*", null, null, plantPT1);
            //alternatively use named parameter
            SearchAsync("#H1*", filter: plantPT1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant">
            <summary>
            Plant where a certain material can get produced
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Plant.City">
            <summary>
            city where the plat is located
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Plant.CompanyCode">
            <summary>
            company code of the plant
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Plant.Country">
            <summary>
            country where the plant is located
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Plant.PostalCode">
            <summary>
            postal code where the plant is located
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Plant.Region">
            <summary>
            region of the plant
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Plant.StreetNumberOrPOBox">
            <summary>
            street number or post box of the plant
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Plant.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Plant.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> #P1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#P1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Plant"/> s that start with #P1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //get related CompanyCodes for ControllingArea
            var controllingAreaCA1 = ControllingArea.CreatePlaceholder("#CA1", selectedCalculationVersion);
            var companyCodesInCA1 = (await CompanyCode.SearchAsync(null, filter: controllingAreaCA1)).ResultObject;
            //filter Plants on CompanyCodes
            await Plant.SearchAsync("#P1*", filter: companyCodesInCA1.ToArray());
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource">
            <summary>
            class that describes the source of the price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource.SourceType">
            <summary>
            type of source eg.g if the price is calculated or a manual set price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource.DeterminationSequence">
            <summary>
            determination sequence
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource.ConfidenceLevel">
            <summary>
            the confidence level of the price
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.SourceType,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object. Note: this only resolves locally stored instances and does not yet create temporary items.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="sourceType">The source type of the placeholder as part of its key.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.PriceSource"/> #P1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#P1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ProfitCenter">
            <summary>
            Profit center master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ProfitCenter.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="controllingArea">The controlling area as part of the key</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ProfitCenter"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ProfitCenter.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ProfitCenter"/> #P1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#P1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ProfitCenter"/> s that start with #P1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#P1*", null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#P1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.SourceType">
            <summary>
            source type of the price
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SourceType.Material">
            <summary>
            coming from a material
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SourceType.Activity">
            <summary>
            coming from an activity
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SourceType.Manual">
            <summary>
            price set manually
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SourceType.Calculated">
            <summary>
            price is calculated
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.SpecificPriceRule">
            <summary>
            class that describes a rule for specific price determination logic
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.SpecificPriceRule.RuleCode">
            <summary>
            rule code for a specific price determination rule
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.SpecificPriceRule.SourceType">
            <summary>
            source type for a specific price determination rule
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.SpecificPriceRule.Position">
            <summary>
            priority of a specific price determination rule
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.SpecificPriceRule.PriceDeterminationStrategyId">
            <summary>
            Id of the corresponding price determination strategy for a specific price determination rule
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode">
            <summary>
            Rule codes for price determination logic
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.CONTROLLING_AREA">
            <summary>
            Controlling Area rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.NEW">
            <summary>
            Controlling Area rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.COST_CENTER">
            <summary>
            New rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.ACTIVITY_TYPE">
            <summary>
            Cost Center rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.PROJECT">
            <summary>
            Activity Type rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.CUSTOMER">
            <summary>
            Project rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.PLANT">
            <summary>
            Customer rule code
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.Master.SpecificRuleCode.VENDOR">
            <summary>
            Plant rule code
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Status">
             <summary>
            
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Status.IsActive">
            <summary>
            gets the IsActive filed
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Status.IsDefault">
             <summary>
            gets the IsDefault field
             </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.Status.DisplayOrder">
             <summary>
            gets the display order
             </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Status.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object. Note: this only resolves locally stored instances and does not yet create temporary items.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.</param>
            <returns></returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Status.SearchAsync(System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id and the master data time stamp.
            The <paramref name="id"/> can be null to designate a wild card search.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <example>
            Get all objects of type <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Status"/> #V3:
            <code>
            SearchAsync(null);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure">
            <summary>
            Representation of a Unit of Measure entity.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.Name">
            <summary>
            Name of the Unit of Measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.Denominator">
            <summary>
            The denominator of the Unit of Measure entity.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.Dimension">
            <summary>
            Type of the dimension of the Unit of Measure.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.ExponentBase10">
            <summary>
            Base exponent.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.Numerator">
            <summary>
            The numerator of the Unit of Measure entity.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.SiConstant">
            <summary>
            The Si constant of the Unit of Measure entity.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.DecimalsDisplayed">
            <summary>
            Number of displayed decimals for this entity. Obsolete. This property has been removed from PLC 4.0 and will be deleted from the API.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.UnitOfMeasure"/> #U1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#U1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.ValuationClass">
            <summary>
            ValuationClass master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ValuationClass.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ValuationClass"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.ValuationClass.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ValuationClass"/> #V1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#V1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.Vendor">
            <summary>
            Vendor master data
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Vendor.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Vendor"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.Vendor.SearchAsync(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.Vendor"/> #V1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#V1", null, DateTime.Now.Date.AddMonths(-2));
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter">
            <summary>
            Work center master data
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter.CustomFields">
            <summary>
            gets the custom fields
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter.CreatePlaceholder(System.String,Sap.Plc.AddIn.AddInView.Data.Master.Plant,Sap.Plc.AddIn.AddInView.Data.CalculationVersion)">
            <summary>
            Creates a placeholder object, which has no server-side representation.
            </summary>
            <param name="id">Id of the placeholder.</param>
            <param name="plant">The plant for the placeholder as part of its key.</param>
            <param name="calculationVersion">
            The calculation version within its context the created instance shall be used. This
            version is used to resolve locally stored instances if possible.
            </param>
            <returns>The <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter"/> placeholder instance.</returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter.SearchAsync(System.String,System.String,System.Nullable{System.DateTime},Sap.Plc.AddIn.AddInView.Data.Master.Masterdata[])">
            <summary>
            Looks up a specific version of this type in Database by comparing the given id, description and the master data time stamp.
            The <paramref name="id"/> and <paramref name="description"/> can include a * to designate a wild card search.
            They are optional and when set together the search results are narrowed to jointly match both conditions.
            The optional <paramref name="filter"/> parameter defines additional MasterData objects to narrow down the search results to the referenced MasterData IDs. 
            The <paramref name="masterDataTimeStamp"/> is expected to be the one of the CalculationVersion. 
            The optional filter can e.g. limit the search results to the <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> of a <see cref="T:Sap.Plc.AddIn.AddInView.Data.Project"/>.
            </summary>
            <param name="id">The MasterData ID to search for.</param>
            <param name="description">The MasterData Description to search for.</param>
            <param name="masterDataTimeStamp">Describes a point in time. Only the master data valid at this point is retrieved. If this value is null the most recent version of the master data will be returned</param>
            <param name="filter">Optional filter criteria to add as a search condition.</param>
            <returns>A List of matched objects</returns>
            <remarks>By default only 100 result items are returned.</remarks>
            <example>
            Search for specific <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter"/> #W1:
            <code>
            // load master data valid 2 months ago
            SearchAsync("#W1", false, DateTime.Now.Date.AddMonths(-2));
            </code>
            Search for <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.WorkCenter"/> s that start with #W1 in <see cref="T:Sap.Plc.AddIn.AddInView.Data.Master.ControllingArea"/> #CA1:
            <code>
            //explicitly set masterDataTimestamp to null
            SearchAsync("#W1*", false, null, controllingAreaCA1);
            //alternatively use named parameter
            SearchAsync("#W1*", filter: controllingAreaCA1);
            </code>
            </example>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ICustomFieldsExtended">
            <summary>
            interface for a data model that can have custom fields
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ICustomFieldsExtended.CustomFields">
            <summary>
            gets the custom fields
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Project">
            <summary>
                project class
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.ControllingArea">
            <summary>
                gets the controlling area
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.EndOfProject">
            <summary>
                gets the date of project end
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.Id">
            <summary>
                gets the id of the project
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.Name">
            <summary>
                gets the name of the project
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.ProjectResponsible">
            <summary>
                gets the name of the project responsible
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.StartOfProject">
            <summary>
                gets the date of project end
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.CreatedBy">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.LastModifiedAt">
            <inheritdoc />
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Project.LastModifiedBy">
            <inheritdoc />
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Project.GetProjectsAsync">
            <summary>
                Asynchronous method that retrieves all existing projects
            </summary>
            <returns>
                A task containing a result object with an enumeration of the projects
            </returns>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Data.Project.GetCalculationsAsync">
            <summary>
                Gets the a list of instances of <see cref="T:Sap.Plc.AddIn.AddInView.Data.Calculation" /> that belong to that project.
                The list is requested from the backend.
            </summary>
            <returns>a task with the request result containing the calculation</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.QuantityDependencyMode">
            <summary>
            defines the dependency of the quantity
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.QuantityDependencyMode.FixQuantity">
            <summary>
            Quantity is fixed
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.QuantityDependencyMode.DepOnAssemblyQuantity">
            <summary>
            Quantity is dependent on Assembly
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.Data.QuantityDependencyMode.DepOnLotSize">
            <summary>
            Quantity is dependent on LotSize
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem">
            <summary>
            cost item class that does not allow to set any property
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Id">
            <summary>
            get id of the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CreatedBy">
            <summary>
            get created by
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.LastModifiedBy">
            <summary>
            get last modified by
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CreatedAt">
            <summary>
            get created at
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.LastModifiedAt">
            <summary>
            get last modified at
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.ActivityType">
            <summary>
            get activity type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.BusinessArea">
            <summary>
            get business area of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Process">
            <summary>
            get process of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Comment">
            <summary>
            get comment of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CompanyCode">
            <summary>
            get company code of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.ConfidenceLevel">
            <summary>
            get confidence level of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CostCenter">
            <summary>
            get cost center of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Account">
            <summary>
            get account of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CostingLotSize">
            <summary>
            get costing lot size of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CostingLotSizeIsManual">
            <summary>
             get whether the costing lot size of the cost item is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CostingLotSizeUoM">
            <summary>
            get unit of measure for costing lot size of the cost item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Document">
            <summary>
            get document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.DocumentPart">
            <summary>
            get document part
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.DocumentType">
            <summary>
            get document type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.DocumentStatus">
            <summary>
            get document status
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.LaboratoryDesignOffice">
            <summary>
            get laboratory design office
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.DocumentVersion">
            <summary>
            get document version
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.EngineeringChangeNumberId">
            <summary>
            get engineering change number id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.IsDisablingPriceDetermination">
            <summary>
            get if price determination is disabled
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.IsDisablingAccountDetermination">
            <summary>
            get if account determination is disabled
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.IsConfigurableMaterial">
            <summary>
            A material for which you can specify the characteristics during order processing
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.IsPhantomMaterial">
            <summary>
            if a material imported from SAP ERP is a phantom material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.IsRelevantToCostingInErp">
            <summary>
            get if item is relevant to costing in ERP
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Marking">
            <summary>
            get the marking/highlighting
            different values can be combined via bit masking
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Material">
            <summary>
            gets the material
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.MaterialGroup">
            <summary>
            gets the material group if no material is assigned to the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.MaterialType">
            <summary>
            gets the material type if no material is assigned to the item
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.MaterialPlant">
            <summary>
            gets the material plant relation
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.OtherCost">
            <summary>
            get other cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.OtherCostFixedPortion">
            <summary>
            get other cost with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.OtherCostVariablePortion">
            <summary>
            get other cost with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Plant">
            <summary>
            gets the plant object
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Price">
            <summary>
            get price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceAppliedSurcharge">
            <summary>
            gets the surcharge applied for a price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Surcharge">
            <summary>
            gets the surcharge applied for a price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceFixedPortion">
            <summary>
            get price with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceFixedPortionIsManual">
            <summary>
            get if price with fixed portion is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceForTotalQuantity">
            <summary>
            get price for total quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceForTotalQuantityFixedPortion">
            <summary>
            get price for total quantity with fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceForTotalQuantityVariablePortion">
            <summary>
            get price for total quantity with variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceSource">
            <summary>
            get price source
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceTransactionCurrency">
            <summary>
            get price transaction currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceUnit">
            <summary>
            get price unit
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceUnitIsManual">
            <summary>
            get if price unit is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceUnitUoM">
            <summary>
            get price unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceVariablePortion">
            <summary>
            get price variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceVariablePortionIsManual">
            <summary>
            get if price variable portion is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.ProfitCenter">
            <summary>
            get profit center id
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.QuantityDependencyMode">
            <summary>
            get quantity dependency mode
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.QuantityForOneAssembly">
            <summary>
            get quantity for one assembly
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.QuantityForOneAssemblyIsManual">
            <summary>
            get if quantity for one assembly is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.QuantityForOneAssemblyUoM">
            <summary>
            get quantity for one assembly unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TargetCost">
            <summary>
            get target cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TargetCostCurrency">
            <summary>
            get target cost currency
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TargetCostIsManual">
            <summary>
            get  if target cost is manual
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalCost">
            <summary>
            get total cost
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalCostFixedPortion">
            <summary>
            get total cost fixed portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalCostVariablePortion">
            <summary>
            get total cost variable portion
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalQuantity">
            <summary>
            get total quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalQuantityUoM">
            <summary>
            get total quantity unit of measure
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.Vendor">
            <summary>
            get vendor
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.WorkCenter">
            <summary>
            get work center
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CostingLotSizeCalculated">
            <summary>
            get costing lot size calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceFixedPortionCalculated">
            <summary>
            get the price fixed portion calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceVariablePortionCalculated">
            <summary>
            get price variable portion calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PriceUnitCalculated">
            <summary>
            get price unit calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.QuantityForOneAssemblyCalculated">
            <summary>
            get quantity for one assembly calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TargetCostCalculated">
            <summary>
            get target cost calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalQuantityCalculated">
            <summary>
            get total quantity calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.TotalQuantityUoMCalculated">
            <summary>
            get total quantity unit of measure calculated
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.OverheadGroup">
            <summary>
            get the overhead group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.ValuationClass">
            <summary>
            get the valuation class
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PurchasingGroup">
            <summary>
            get the purchasing group
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.PurchasingDocument">
            <summary>
            get the purchasing document
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.LocalContent">
            <summary>
            get local content of material price
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CostingSheetResults">
            <summary>
            Holds the costing sheet split result for this item. Maps the id of the costing sheet row
            to the result for this group.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.ComponentSplitResults">
            <summary>
            Holds the component split result for this item. Maps the id of the account group to the result for this group.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.BaseQuantity">
            <summary>
            get the base quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.BaseQuantityCalculated">
            <summary>
            gets the calculated base quantity
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.BaseQuantityIsManual">
            <summary>
            get if the base quantity should be a manual or calculated value
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.ReadOnlyCostItem.CustomFields">
            <summary>
            returns the custom fields of the item
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Result">
            <summary>
            abstract class representing the result of an back-end call
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Result.Errors">
            <summary>
            gets a list of the errors when the call was unsuccessful
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Result.Success">
            <summary>
            returns if the backend call was successful
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.Result`1">
            <summary>
            abstract class representing the result of an backend call containing a result object
            </summary>
            <typeparam name="TResultObject">TResultObject</typeparam>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.Result`1.ResultObject">
            <summary>
            returns the result object
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Data.User">
            <summary>
            Represents a user 
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Data.User.Id">
            <summary>
            Represents the user id
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab">
            <summary>
            This class represents the Calculation Tab of the user interface. 
            It provides access to UI and data elements presented in that view.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.RibbonEntries">
            <summary>
            Returns the list of ribbon entries that can be used to add custom ribbon buttons.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.SidePanels">
            <summary>
            allows to add SidePanels that the Add-In provides
            might be an empty List if no SidePanel is provided  
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CostItemSelectionChanged">
            <summary>
            This event notifies about the change of selection in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CostItemChanged">
            <summary>
            This event notifies about the change of a cost item in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CostItemCreated">
            <summary>
            This event notifies about the creation of a new cost item in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CostItemBranchModified">
            <summary>
            This event notifies about the modification of a cost item and its child items.
            The event will be triggered at the end of mass updates, inserts and deletes (e.g. import of data)
            to avoid that every single item change will be reported via a separate event
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CostItemDeleteRequested">
            <summary>
            This event notifies about the occurrence of a cost item delete request. The event is
            triggered before the item is deleted and gives the Add-In developer the opportunity to
            prevent the main application from deleting the cost item.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CostItemDeleted">
            <summary>
            This event notifies about the deletion of a cost item in any opened calculation version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationVersionChanged">
            <summary>
            This event notifies about the change of a calculation version (the version could belong to any calculation).
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationVersionSelectionChanged">
            <summary>
            This event notifies about the change in the selection of a calculation version (e.g. switching tabs, closing the last calculation version)
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationVersionSaveRequested">
            <summary>
            This event notifies about the occurrence of a calculation version save request. The event
            is triggered before the calculation version is saved and gives the Add-In developer the
            opportunity to prevent the main application from saving the version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationVersionSaved">
            <summary>
            This event notifies that a calculation version had been saved.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationVersionCloseRequested">
            <summary>
            This event notifies about the occurrence of a calculation version close request. The event
            is triggered before the calculation version is closed and gives the Add-In developer the
            opportunity to prevent the main application from closing the version.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationVersionClosed">
            <summary>
            This event notifies that a calculation version had been closed.
            </summary>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.CalculationChanged">
            <summary>
            This event notifies about the change of a calculation.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.SelectedCostItemInActiveVersion">
            <summary>
            This property gets or sets the selected cost item in the currently active calculation version.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.CalculationTab.SetSelectedCostItemInActiveVersion(System.Int64)">
            <summary>
            Sets the selection to a specific cost item in the active calculation version. The
            designated selected cost item is identified by its id.
            </summary>
            <param name="itemId">The id of the cost item that shall be selected.</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.ProjectTab">
            <summary>
            This class represents the project tab of the user interface. 
            It provides access to UI and data elements presented in that view.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.ProjectTab.RibbonEntries">
            <summary>
            Returns the list of ribbon entries that can be used to add custom ribbon buttons.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.CockpitTab">
            <summary>
            This class represents the Cockpit Tab of the user interface.
            It provides access to UI and data elements presented in that view.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.CockpitTab.RibbonEntries">
            <summary>
            Returns the list of ribbon entries that can be used to add custom ribbon buttons.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.CockpitTab.FocusedItem">
            <summary>
            Focused item in cockpit tab
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.CockpitTab.RefreshExpandedItemsAsync">
            <summary>
            Refresh expanded items in Cockpit Tab
            </summary>
            <returns>True if refresh suceeded</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Controls.DialogTextBlock">
            <summary>
            The Control inherits TextBlock and has a WordWrapping activated by default.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog">
            <summary>
            A basic dialog class that contains a title, 
            some buttons, a control and can be of a certain type
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.MainAppDialog">
            <summary>
            property contains the response interface after creating the dialog via the pipeline
            the property is needed to call operations like close etc.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Title">
            <summary>
            Title that should be displayed in the titleBar of the dialog
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Type">
            <summary>
            the type of the dialog
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Control">
            <summary>
            UI control that should be displayed in the dialog
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Buttons">
            <summary>
            buttons that the dialog should contain
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.SizeToContent">
            <summary>
            Specifies how a window will automatically size itself to fit the size of its content.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Width">
            <summary>
            The desired width of the dialog.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Height">
            <summary>
            The desired height of the dialog.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.#ctor(System.String,Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType,System.Windows.FrameworkElement,System.Collections.Generic.IList{Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton})">
            <summary>
            creates a basic dialog
            </summary>
            <param name="title">title of the dialog</param>
            <param name="type">the type of the dialog</param>
            <param name="control">control that should be displayed</param>
            <param name="buttons">the buttons that should be part of the dialog</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.#ctor(System.String,Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType,System.Windows.FrameworkElement,System.Collections.Generic.IList{Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton},System.Nullable{System.Windows.SizeToContent},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            creates a basic dialog
            </summary>
            <param name="title">title of the dialog</param>
            <param name="type">the type of the dialog</param>
            <param name="control">control that should be displayed</param>
            <param name="buttons">the buttons that should be part of the dialog</param>
            <param name="sizeToContent">The sizing strategy.</param>
            <param name="width">The width of the dialog.</param>
            <param name="height">The height of the dialog.</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.AddErrorMessage(System.String)">
            <summary>
            adds an error message to the dialog
            can be used e.g. when a validation error in the user control should be displayed
            </summary>
            <param name="error">error message that should be displayed</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.ClearErrorMessages">
            <summary>
            clear all previously added error messages
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Show">
            <summary>
            shows the dialog 
            this can only be called after the addin has been initialized with the setup method
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog.Close">
            <summary>
            closes the dialog
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton">
            <summary>
            Button that can be added to the Dialog
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton" /> class.
            </summary>
            <param name="buttonText">The button text.</param>
            <param name="isCancel">defines if the button is the cancel button</param>
            <param name="isDefault">defines if the button is the default button</param>
            <param name="shouldFocus">defines if the button should be focused</param>        
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.Clicked">
            <summary>
            Raised when the entry is clicked.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.OnClick">
            <summary>
            Called when the <see cref="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton" /> is clicked.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.IsEnabled">
            <summary>
            Indicates / sets if the entry is enabled / clickable.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.ButtonText">
            <summary>
            returns the button text
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.IsCancel">
            <summary>
            retuns if the button is the cancel button
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.IsDefault">
            <summary>
            returns if the button is the default button
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogButton.ShouldFocus">
            <summary>
            returns if the button should be focused
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType">
            <summary>
            This enum defines the types of a dialog window
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType.None">
            <summary>defines an undefined dialog type, to display arbitrary messages</summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType.Success">
            <summary>defines a successful dialog type, to display success messages</summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType.Info">
            <summary>defines a informational dialog type, to display info messages</summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType.Warning">
            <summary>defines a warning dialog type, to display warning messages</summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType.Error">
            <summary>defines a error dialog type, to display error messages</summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.ErrorDialog">
            <summary>
            Special dialog used to display an error
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.ErrorDialog.#ctor(System.String,System.String)">
            <summary>
            creates an error dialog that contains only a TextBox displaying the error,
            a title for the title bar, and a ok button
            more buttons can be added accessing the Buttons property
            </summary>
            <param name="title">title for the error dialog</param>
            <param name="errorMessage">message that should be displayed</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.IDialog">
            <summary>
            internal interface used to map the main ui dialog interactions to the addin dialog object
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.IDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.IDialog.AddErrorMessage(System.String)">
            <summary>
            Adds an error message on the dialog
            </summary>
            <param name="messageText">The message text.</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.IDialog.ClearAllMessages">
            <summary>
            Clears all messages.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.InfoDialog">
            <summary>
            special dialog for showing an info message
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.InfoDialog.#ctor(System.String,System.String)">
            <summary>
            dialog that creates and info message only containing a TextBox showing the info,
            a title, and an ok button; more buttons can be added accessing the buttons collection
            </summary>
            <param name="title">title of the dialog</param>
            <param name="infoMessage">the info message that should be displayed</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.TextBlockDialog">
            <summary>
            simple text box dialog
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.TextBlockDialog.#ctor(System.String,System.String,Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.DialogType)">
            <summary>
            dialog that shows a text message in a TextBox,
            a title, and an ok button; more buttons can be added accessing the buttons collection
            </summary>
            <param name="title">title of the dialog</param>
            <param name="message">the message that should be displayed</param>
            <param name="type">type of the dialog</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.WarningDialog">
            <summary>
            special dialog for showing an warning message
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.WarningDialog.#ctor(System.String,System.String)">
            <summary>
            dialog that creates a waring message only containing a TextBox showing the waring,
            a title, and an ok button; more buttons can be added accessing the buttons collection
            </summary>
            <param name="title">title of the dialog</param>
            <param name="warningMessage">the message that should be displayed</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message">
            <summary>
            class that defines messages that can be displayed by the main application in a message bar
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.Text">
            <summary>
            the actual message text that should be transmitted
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.Type">
            <summary>
            The type of the message that declares the severity 
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.Id">
            <summary>
            Returns the automatic generated GUID of the message
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.ShowPermanent">
            <summary>
            if true displays the message until it is invalidated 
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.#ctor(System.String,Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageType)">
            <summary>
            creates a new message
            </summary>
            <param name="text">the actual text that should be transmitted</param>
            <param name="type">the type of the message that declares the severity; default will be Info</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.Show(System.Boolean)">
            <summary>
            Shows the Message in the Message Bar of the main application
            </summary>
            <param name="permanent">indicates if the message should be shown permanently in the MessageBar 
            so that it needs to be removed individually by calling Inactivate()
            </param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message.Deactivate">
            <summary>
            In case the message was marked permanent while calling Show(true) it can be deactivated
            so that it will only appear in the message history but is removed from the MessageBar
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageService">
            <summary>
            a service class that is used to add an remove messages from the message bar
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageService.AddMessage(Sap.Plc.AddIn.AddInView.UserInterface.Messaging.Message)">
            <summary>
            Adds a message to message bar
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageService.InvalidateMessages(System.String)">
            <summary>
            Invalidates a messages on message bar.
            </summary>
            <param name="sourceGroup">the group of messages that should be invalidated</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageType">
            <summary>
            Type of messages shown in status bar or within a dialog
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageType.Info">
            <summary>
            Message type classified as an information
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageType.Success">
            <summary>
            Message type classified as a success message
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageType.Warning">
            <summary>
            Message type classified as a warning message
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.Messaging.MessageType.Error">
            <summary>
            Message type classified as an error message
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory">
            <summary>
            This Enumeration describes the superset of all ribbon buttons, which can be enhanced by an add-in.
            Dependent on the application area (cockpit, calculation, administration), not all categories may be allowed.
            The explanations below should give a guidance under which category to place an add-in ribbon button entry,
            but there won't and can't be a check that e.g. only Import Add-Ins are placed under that category.
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.New">
            <summary>
            For Application Area Calculation:
            Creation of new Calculations / Calculation Versions
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.Add">
            <summary>
            For Application Area Calculation:
            Creation of new Cost Items (e.g. based on Templates)
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.Import">
            <summary>
            For Application Area Calculation:
            Import of BOM / Routing
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.Export">
            <summary>
            For Application Area Calculation:
            Export of BOM / Routing
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.Validate">
            <summary>
            For Application Area Calculation:
            Check if the Calculation Version is valid
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.Analyze">
            <summary>
            For Application Area Calculation:
            Link to Reports
            </summary>
        </member>
        <member name="F:Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory.Other">
            <summary>
            For Application Area Calculation:
            Any Ribbon Entries which do not fit to any other category
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry">
            <summary>
            An entry that can be added to an existing button of the ribbon control in the main application
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry.#ctor(Sap.Plc.AddIn.AddInView.UserInterface.RibbonCategory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry" /> class.
            </summary>
            <param name="category">The category the ribbon belongs to</param>
            <param name="caption">The caption for the ribbon entry</param>
        </member>
        <member name="E:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry.Clicked">
            <summary>
            Raised when the entry is clicked.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry.OnClick">
            <summary>
            Called when the <see cref="T:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry" /> is clicked.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry.IsEnabled">
            <summary>
            Indicates / sets if the entry is enabled / can be clicked.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry.Category">
            <summary>
            The category (button) the ribbon entry belongs to
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.RibbonEntry.Caption">
            <summary>
            The caption of the ribbon entry
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.SidePanel">
            <summary>
            SidePanel that can be added to the PLC application
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.SidePanel.#ctor(System.String,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of type SidePanel with a caption and an control 
            </summary>
            <param name="caption">The side panel caption</param>
            <param name="control">The side panel user interface control</param>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.SidePanel.Caption">
            <summary>
            returns the caption of the SidePandel
            this caption can only be set via the constructor
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.SidePanel.Control">
            <summary>
            returns the Control to be shown in the SidePanel
            this control can only be set via the constructor
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.SidePanel.Equals(Sap.Plc.AddIn.AddInView.UserInterface.SidePanel)">
            <summary>
            compares on SidePanel object with another instance
            </summary>
            <param name="sidePanel">other SidePanel instance</param>
            <returns>true if equal</returns>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.UserInterface.IUserInterfaceService">
            <summary>
            Service instance which the add-in can use to create Dialogs and to raise message on status bar
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.IUserInterfaceService.Messaging">
            <summary>
            returns a messaging service that can be used to send and remove messages to and from the message bar 
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.UserInterface.IUserInterfaceService.CalculationSidePanels">
            <summary>
            allows to add SidePanels that the Add-In provides
            might be an empty List if no SidePanel is provided  
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.UserInterface.IUserInterfaceService.ShowDialogInternal(Sap.Plc.AddIn.AddInView.UserInterface.Dialogs.Dialog)">
            <summary>
            shows a dialog in the main application
            </summary>
            <param name="dialog">can be any kind of dialog derived from the dialog class</param>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptionProvider`1">
            <summary>
            Provides type metadata for a <see cref="T:Sap.Plc.AddIn.AddInView.Data.CustomField"/> instance 
            by retrieving property metadata via the <see cref="T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptor"/>.
            </summary>
            <typeparam name="T">An implementation of the <see cref="T:Sap.Plc.AddIn.AddInView.Data.CustomField"/> abstract class</typeparam>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptionProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref='T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptionProvider`1'/> class, passing a default type description provider into the base constructor.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptionProvider`1.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            This method returns a custom type descriptor for the given type / object.  
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptor">
            <summary>
            Provides property metadata for a <see cref="T:Sap.Plc.AddIn.AddInView.Data.CustomField"/> instance.
            Returns the default metadata for all but the <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.Value"/> property, where the <see cref="T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1"/> is used.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,System.Type)">
            <summary>
            Creates a new CustomFieldTypeDescriptor object.
            If the parent is null, CustomTypeDescriptor returns the defined default values for each method.
            If the parent is  non-null, CustomTypeDescriptor calls the parent's version of the method.
            </summary>
            <param name="parent">A parent TypeDescriptor to use for retrieving metadata</param>
            <param name="valueDataType">The actual <see cref="T:System.Type"/> the <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.Value"/> property stores</param>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptor.GetProperties">
            <summary>
            The GetProperties method returns a collection of property descriptors 
            for the object this type descriptor is representing. 
            If no parent TypeDescriptor is provided, this will return an empty property collection.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            The GetProperties method returns a collection of property descriptors 
            for the object this type descriptor is representing. 
            An optional attribute array may be provided to filter the collection that is returned.
            If no parent TypeDescriptor is provided, this will return an empty property collection.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The GetPropertyOwner method returns an instance of an object that 
            owns the given property for the object this type descriptor is representing.  
            Returning null from this method causes the TypeDescriptor object 
            to use its default type description services.
            </summary>
        </member>
        <member name="T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1">
            <summary>
            Provides type metadata for the <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.Value"/> property.
            </summary>
            <typeparam name="T">An implementation of the <see cref="T:Sap.Plc.AddIn.AddInView.Data.CustomField"/> abstract class</typeparam>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref='T:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1'/> class with the specified data type for the <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.Value"/> property.
            </summary>
            <param name="annotadedPropertyType">The actual type that <see cref="P:Sap.Plc.AddIn.AddInView.Data.CustomField.Value"/> stores</param>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.CanResetValue(System.Object)">
            <summary>
            Indicates whether resetting the <paramref name="component"/> will change the value of the <paramref name="component"/>.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.ResetValue(System.Object)">
            <summary>
            Resets the value for this property of the component.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property needs to be persisted.
            </summary>
        </member>
        <member name="P:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.ValueIsOfCorrectType(`0,System.Object)">
            <summary>
            Indicates whether the given <paramref name="value"/> matches the type of this property in the <paramref name="component"/>.
            </summary>
        </member>
        <member name="M:Sap.Plc.AddIn.AddInView.Utilities.CustomFieldValuePropertyDescriptor`1.GetValueDataType(`0)">
            <summary>
            Returns the <see cref="T:System.Type"/> of this property in this <paramref name="component"/>.
            </summary>
        </member>
    </members>
</doc>
