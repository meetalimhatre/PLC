PROCEDURE "sap.plc.db.masterdata_replication.procedures::p_load_t_material"
LANGUAGE SQLSCRIPT 
SQL SECURITY INVOKER AS 
	lv_current_utctimestamp timestamp; 
	lv_start_utctimestamp timestamp; 
	lv_run_id nvarchar(50); 
	lv_updated_rows integer; 
	lv_deleted_rows integer; 
	lv_count integer; 
	lv_batch_size integer; 
	lv_offset integer; 
	lv_total_updated_rows integer;
	lv_current_user nvarchar(256);
	lv_count_deleted_rows integer; 
BEGIN 
	select current_utctimestamp 
		into lv_current_utctimestamp 
		from "sap.plc.db::DUMMY";

	select SESSION_CONTEXT('SCHEDULER_RUN_ID') 
		into lv_run_id 
		from "sap.plc.db::DUMMY";

	select SESSION_CONTEXT('BATCH_SIZE') 
		into lv_batch_size 
		from "sap.plc.db::DUMMY";

	select SESSION_CONTEXT('APPLICATIONUSER') 
		into lv_current_user 
		from "sap.plc.db::DUMMY";   

	if exists(select id from "sap.plc.db::map.t_destination_entity" where table_name = 't_material' and repl_status = 'ENABLED') 
	then 
		select current_utctimestamp 
			into lv_current_utctimestamp 
			from "sap.plc.db::DUMMY"; 

		lv_start_utctimestamp=:lv_current_utctimestamp; 
		lv_offset = 0; 
		lv_total_updated_rows = 0;

		--we mark every material coming from outside plc as 255
		update "sap.plc.db::basis.t_material" 
		set _source = 255
		where _VALID_FROM < :lv_current_utctimestamp
			AND _VALID_TO IS NULL
			AND _SOURCE = 2; -- for the moment we keep only source 2

		while (1=1) do 
			ltMasterdataEntities=select * from "sap.plc.db.masterdata_replication.functions::f_select_t_material"(:lv_offset, :lv_batch_size); 
			
			update "sap.plc.db::basis.t_material" as tbl
			set tbl._source = 2
			where tbl.material_id in (select material_id from :ltMasterdataEntities where _source = 2)
			and tbl._source = 255;

			call "sap.plc.db.masterdata_replication.procedures::p_update_t_material"(:ltMasterdataEntities,lv_updated_rows); 
			lv_total_updated_rows = :lv_total_updated_rows + :lv_updated_rows;
					
			select count(*) into lv_count from :ltMasterdataEntities;
			if (:lv_count < :lv_batch_size) or (:lv_batch_size is null) THEN  
				lv_count = :lv_count + lv_offset;
				break; 
			else  
				lv_offset = :lv_offset + :lv_batch_size; 
			end if; 
		end while;  

		select current_utctimestamp 
			into lv_current_utctimestamp 
			from "sap.plc.db::DUMMY"; 

		lv_offset = 0;

		while (1=1) do
			
			lt_deleted_rows =
				select it.MATERIAL_ID, it.BASE_UOM_ID, it.MATERIAL_GROUP_ID, it.MATERIAL_TYPE_ID, it.IS_CREATED_VIA_CAD_INTEGRATION,
					it.IS_PHANTOM_MATERIAL, it.IS_CONFIGURABLE_MATERIAL, :lv_current_utctimestamp as _VALID_FROM, null as _VALID_TO, 
					1 as _SOURCE, :lv_current_user as _CREATED_BY, 1 as DELETED_FROM_SOURCE
					{{masterdataCustomFieldsWithPrefixWithoutUnit Material 'it'}} 
				from
				(select tbl.MATERIAL_ID, tbl.BASE_UOM_ID, tbl.MATERIAL_GROUP_ID, tbl.MATERIAL_TYPE_ID, tbl.IS_CREATED_VIA_CAD_INTEGRATION,
					tbl.IS_PHANTOM_MATERIAL, tbl.IS_CONFIGURABLE_MATERIAL,
					Count(tbl.MATERIAL_ID) OVER (PARTITION BY tbl.MATERIAL_ID) AS DUPLICATE_KEY_COUNT
					{{masterdataCustomFieldsWithPrefixWithoutUnit Material 'plcExtTable'}} 
					from "sap.plc.db::basis.t_material" tbl
					{{#if Material.customFields}}
					left outer join {{t_extensionTable Material}} as plcExtTable
                            on  tbl.MATERIAL_ID  = plcExtTable.MATERIAL_ID
                            and tbl._VALID_FROM  = plcExtTable._VALID_FROM
					{{/if}}
					where tbl._source = 255 
				) as it
				where it.DUPLICATE_KEY_COUNT = 1
					-- ignore not existing Material Group, Material Type and UoM
					and ( IFNULL(it.MATERIAL_GROUP_ID, '') = '' or it.MATERIAL_GROUP_ID in (select MATERIAL_GROUP_ID from "sap.plc.db::basis.t_material_group" where _valid_to is null) )
					and ( IFNULL(it.MATERIAL_TYPE_ID,'') = '' or it.MATERIAL_TYPE_ID in (select MATERIAL_TYPE_ID from "sap.plc.db::basis.t_material_type" where _valid_to is null) )
					and ( IFNULL(it.BASE_UOM_ID,'') = '' or it.BASE_UOM_ID in (select UOM_ID from "sap.plc.db::basis.t_uom" where _valid_to is null) )
			    order by MATERIAL_ID, _VALID_FROM asc
				limit :lv_batch_size offset :lv_offset;
			
			INSERT INTO "sap.plc.db::basis.t_material"
				( MATERIAL_ID, BASE_UOM_ID, MATERIAL_GROUP_ID, MATERIAL_TYPE_ID, IS_CREATED_VIA_CAD_INTEGRATION,
			    IS_PHANTOM_MATERIAL, IS_CONFIGURABLE_MATERIAL, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY, DELETED_FROM_SOURCE )
				select MATERIAL_ID, BASE_UOM_ID, MATERIAL_GROUP_ID, MATERIAL_TYPE_ID, IS_CREATED_VIA_CAD_INTEGRATION,
					IS_PHANTOM_MATERIAL, IS_CONFIGURABLE_MATERIAL, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY, DELETED_FROM_SOURCE
				from :lt_deleted_rows;
			
			{{#if Material.customFields}}
			-- also do Custom Fields
			INSERT INTO {{t_extensionTable Material}} 
				(
					MATERIAL_ID, _VALID_FROM 
					{{masterdataCustomFieldsWithoutUnit Material}} 
				)
				select 
					MATERIAL_ID, _VALID_FROM 
					{{masterdataCustomFieldsWithoutUnit Material}}          
				from (
					select
						plcExtTable.MATERIAL_ID,
						:lv_current_utctimestamp as _VALID_FROM
						{{masterdataCustomFieldsWithPrefixWithoutUnit Material 'plcExtTable'}} 
					from {{t_extensionTable Material}} as plcExtTable
					inner join :lt_deleted_rows as tbl
						on plcExtTable.MATERIAL_ID = tbl.MATERIAL_ID
						and plcExtTable._VALID_FROM = tbl._VALID_FROM
				);
			{{/if}}

			--insert log info			
			INSERT INTO "sap.plc.db::map.t_replication_log" (
				FIELD_NAME ,
				FIELD_VALUE,
				MESSAGE_TEXT ,
				MESSAGE_TIME ,
				MESSAGE_TYPE ,
				TABLE_NAME,
				OPERATION,
				RUN_ID
				)
					select 'MATERIAL_ID'				as FIELD_NAME,
							MATERIAL_ID					as FIELD_VALUE,
							'Changed to PLC source'		as MESSAGE_TEXT,
							:lv_current_utctimestamp	as MESSAGE_TIME,
							'INFO'						as MESSAGE_TYPE,
							't_material'				as TABLE_NAME,
							'Replication_Delete'		as OPERATION,
							:lv_run_id					as RUN_ID
					from :lt_deleted_rows;
					
			UPDATE tbl
			SET _VALID_TO = :lv_current_utctimestamp , _CREATED_BY = :lv_current_user
			FROM "sap.plc.db::basis.t_material__text" tbl
			inner join :lt_deleted_rows as del
				on tbl.MATERIAL_ID = del.MATERIAL_ID
			WHERE
				tbl._VALID_FROM < :lv_current_utctimestamp
				AND tbl._VALID_TO IS NULL
				AND tbl._SOURCE <> 1;
			
			INSERT INTO "sap.plc.db::basis.t_material__text"
			(MATERIAL_ID, LANGUAGE, MATERIAL_DESCRIPTION, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY )
			select tbl.MATERIAL_ID, tbl.LANGUAGE, tbl.MATERIAL_DESCRIPTION, :lv_current_utctimestamp as _VALID_FROM,
				null as _VALID_TO, 1 as _SOURCE, :lv_current_user as _CREATED_BY
			from "sap.plc.db::basis.t_material__text" as tbl
			inner join :lt_deleted_rows as del 
				on tbl.MATERIAL_ID = del.MATERIAL_ID
			where tbl._VALID_TO is null
				and tbl._SOURCE <> 1;


			select count(*) into lv_count_deleted_rows from :lt_deleted_rows;
			if (:lv_count_deleted_rows < :lv_batch_size) or (:lv_batch_size is null) THEN  
				break; 
			else  
				lv_offset = :lv_offset + :lv_batch_size; 
			end if; 

		end while;

		--we remove those values that remained with source 255
		update "sap.plc.db::basis.t_material" 
		set _VALID_TO = :lv_current_utctimestamp, _CREATED_BY = :lv_current_user, _SOURCE = 2
        where _SOURCE = 255;

		lv_deleted_rows = ::ROWCOUNT;

		select current_utctimestamp 
		into lv_current_utctimestamp 
		from "sap.plc.db::DUMMY"; 

		insert into "sap.plc.db::map.t_statistics"(table_name,full_count,updated_count,deleted_count,start_time,end_time,run_time_seconds,run_id) 
			values('t_material',:lv_count,:lv_total_updated_rows,:lv_deleted_rows,:lv_start_utctimestamp,:lv_current_utctimestamp,SECONDS_BETWEEN(:lv_start_utctimestamp,:lv_current_utctimestamp),:lv_run_id);  

		update "sap.plc.db::map.t_replication_run" 
			set last_update_time = :lv_current_utctimestamp 
			where run_id=:lv_run_id; 

	end if; 
END