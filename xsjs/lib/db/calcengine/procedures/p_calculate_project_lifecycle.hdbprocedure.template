PROCEDURE "sap.plc.db.calcengine.procedures::p_calculate_project_lifecycle" (
 		IN  iv_project_id                        NVARCHAR(35),
		IN  iv_overwrite_versions                TINYINT
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	AS
BEGIN

	-- We need to consider the follow sets of calculation versions in this procedure:
	-- 1. Lifecycle versions - they are newly created and don't have calculation results yet
	-- 2. Referenced versions that are not lifecycle versions with calculation results and without component split results
	-- 3. Referenced versions that are not lifecycle versions with calculation results and with component split results

	-- Table variable for saved results of referenced calculation versions.
	-- initialize empty
	lt_referenced_version_component_split = SELECT 		
  		master_calculation_version_id,
  		referenced_calculation_version_id,
  		cost_component_id,
  		account_id,
  		cost_fixed_portion,
  		cost_variable_portion,
		cost2_fixed_portion,
		cost2_variable_portion,
		cost3_fixed_portion,
		cost3_variable_portion
	FROM "sap.plc.db::basis.t_item_referenced_version_component_split"
	WHERE 1=2;

	-- determine all lifecycle calculation versions of the project that must be calculated
	-- take all calculation versions of type "lifecycle version" (2) and "manual lifecycle version" (16) depending on the bool variable iv_overwrite_versions
	-- that have a base_version_id as defined in t_project_lifecycle_configuration
	lt_lifecycle_versions = SELECT DISTINCT version.calculation_version_id FROM "sap.plc.db::basis.t_calculation" calculation
		INNER JOIN "sap.plc.db::basis.t_project_lifecycle_configuration" quantities ON calculation.calculation_id = quantities.calculation_id and calculation.project_id = quantities.project_id
		INNER JOIN "sap.plc.db::basis.t_calculation_version" version ON quantities.calculation_version_id = version.base_version_id
		WHERE calculation.project_id = :iv_project_id AND quantities.calculation_version_id IS NOT NULL AND ( version.calculation_version_type = 2
		OR (version.calculation_version_type = 16 and :iv_overwrite_versions = 1) ) ;						

	-- instant return if no lifecycle version must be calculated
	IF IS_EMPTY(:lt_lifecycle_versions) THEN
		RETURN;
	END IF;

	-- get all referenced calculation versions from lifecycle calculation versions of the project, excluding already contained calculation versions
	lt_referenced_calculation_versions = SELECT DISTINCT referenced_calculation_version_id
			FROM "sap.plc.db::basis.t_item" item
				INNER JOIN :lt_lifecycle_versions versions ON item.calculation_version_id = versions.calculation_version_id
			WHERE item.referenced_calculation_version_id IS NOT NULL;
			
	-- initialize variable with directly referenced calculation versions
	lt_new_referenced_calculation_versions = SELECT referenced_calculation_version_id FROM :lt_referenced_calculation_versions;
	
	-- iteratively get all other (indirectly) referenced calculation versions
	WHILE NOT IS_EMPTY(:lt_new_referenced_calculation_versions) DO
		lt_new_referenced_calculation_versions = SELECT DISTINCT item.referenced_calculation_version_id
				FROM "sap.plc.db::basis.t_item" item
					INNER JOIN :lt_new_referenced_calculation_versions refVer ON item.calculation_version_id = refVer.referenced_calculation_version_id
				WHERE item.referenced_calculation_version_id IS NOT NULL;
	
		lt_referenced_calculation_versions = SELECT referenced_calculation_version_id FROM :lt_new_referenced_calculation_versions
			UNION SELECT referenced_calculation_version_id FROM :lt_referenced_calculation_versions;
		
	END WHILE;
	
	-- get all saved results of referenced calculation versions
	-- exclude referenced calculation versions that are also lifecycle versions because we don't have saved results for them
	lt_referenced_version_component_split = SELECT 		
  		split.master_calculation_version_id,
  		split.referenced_calculation_version_id,
  		split.cost_component_id,
  		split.account_id,
  		split.cost_fixed_portion,
  		split.cost_variable_portion,
		split.cost2_fixed_portion,
		split.cost2_variable_portion,
		split.cost3_fixed_portion,
		split.cost3_variable_portion
	FROM "sap.plc.db::basis.t_item_referenced_version_component_split" split
	INNER JOIN "sap.plc.db::basis.t_calculation_version" version ON
		split.master_calculation_version_id = version.calculation_version_id AND
		split.component_split_id = version.component_split_id
	INNER JOIN :lt_referenced_calculation_versions references ON split.referenced_calculation_version_id = references.referenced_calculation_version_id
	INNER JOIN :lt_lifecycle_versions lifecycleVersions ON split.master_calculation_version_id = lifecycleVersions.calculation_version_id
	WHERE references.referenced_calculation_version_id NOT IN (SELECT calculation_version_id FROM :lt_lifecycle_versions);	

	lt_all_versions = SELECT calculation_version_id FROM :lt_lifecycle_versions UNION SELECT referenced_calculation_version_id FROM :lt_referenced_calculation_versions;
	
	-- Determine which versions are only referenced by lifecylce versions that have been already calculated and saved
	lt_referenced_saved_versions = SELECT calculation_version_id FROM :lt_all_versions MINUS SELECT calculation_version_id FROM :lt_lifecycle_versions;

	-- get all version headers (lifecycle versions + all referenced versions)	
	lt_calculation_header = SELECT
			version.CALCULATION_VERSION_ID,
			version.CALCULATION_ID,
			version.CALCULATION_VERSION_NAME,
			version.CALCULATION_VERSION_TYPE,
			version.ROOT_ITEM_ID,
			version.CUSTOMER_ID,
            version.SALES_DOCUMENT,
			version.SALES_PRICE,
			version.SALES_PRICE_CURRENCY_ID,
			version.REPORT_CURRENCY_ID,
			version.COSTING_SHEET_ID,
			version.COMPONENT_SPLIT_ID,
			version.START_OF_PRODUCTION,
			version.END_OF_PRODUCTION,
			version.VALUATION_DATE,
			version.LAST_MODIFIED_ON,
			version.LAST_MODIFIED_BY,
			version.MASTER_DATA_TIMESTAMP,
			version.LIFECYCLE_PERIOD_FROM,
			version.BASE_VERSION_ID,
			version.IS_FROZEN,
			version.EXCHANGE_RATE_TYPE_ID,
			version.MATERIAL_PRICE_STRATEGY_ID,
			version.ACTIVITY_PRICE_STRATEGY_ID,
			
			calculation.CALCULATION_NAME,
			calculation.CURRENT_CALCULATION_VERSION_ID,
			calculation.CREATED_ON AS CALCULATION_CREATED_ON,
			calculation.CREATED_BY AS CALCULATION_CREATED_BY,
			calculation.LAST_MODIFIED_ON AS CALCULATION_LAST_MODIFIED_ON,
			calculation.LAST_MODIFIED_BY AS CALCULATION_LAST_MODIFIED_BY,
			
			project.controlling_area_id AS controlling_area_id,
			project.PROJECT_ID AS PROJECT_ID,
			project.REFERENCE_PROJECT_ID AS PROJECT_REFERENCE_ID,
			project.PROJECT_NAME AS PROJECT_NAME,
			project.PROJECT_RESPONSIBLE AS PROJECT_RESPONSIBLE,
			project.CUSTOMER_ID AS PROJECT_CUSTOMER_ID,
			project.SALES_DOCUMENT AS PROJECT_SALES_DOCUMENT,
			project.SALES_PRICE AS PROJECT_SALES_PRICE,
			project.SALES_PRICE_CURRENCY_ID AS PROJECT_SALES_PRICE_CURRENCY_ID,
			project.COMMENT AS PROJECT_COMMENT,
			project.COMPANY_CODE_ID AS PROJECT_COMPANY_CODE_ID,
			project.PLANT_ID AS PROJECT_PLANT_ID,
			project.BUSINESS_AREA_ID AS PROJECT_BUSINESS_AREA_ID,
			project.PROFIT_CENTER_ID AS PROJECT_PROFIT_CENTER_ID,
			project.REPORT_CURRENCY_ID AS PROJECT_REPORT_CURRENCY_ID,
			project.COSTING_SHEET_ID AS PROJECT_COSTING_SHEET_ID,
			project.COMPONENT_SPLIT_ID AS PROJECT_COMPONENT_SPLIT_ID,
			project.START_OF_PROJECT AS PROJECT_START,
			project.END_OF_PROJECT AS PROJECT_END,
			project.START_OF_PRODUCTION AS PROJECT_START_OF_PRODUCTION,
			project.END_OF_PRODUCTION AS PROJECT_END_OF_PRODUCTION,
			project.VALUATION_DATE AS PROJECT_VALUATION_DATE,
			project.CREATED_ON AS PROJECT_CREATED_ON,
			project.CREATED_BY AS PROJECT_CREATED_BY,
			project.LAST_MODIFIED_ON AS PROJECT_LAST_MODIFIED_ON,
			project.LAST_MODIFIED_BY AS PROJECT_LAST_MODIFIED_BY,
			project.EXCHANGE_RATE_TYPE_ID as PROJECT_EXCHANGE_RATE_TYPE_ID,
			project.MATERIAL_PRICE_STRATEGY_ID as PROJECT_MATERIAL_PRICE_STRATEGY_ID,
			project.ACTIVITY_PRICE_STRATEGY_ID as PROJECT_ACTIVITY_PRICE_STRATEGY_ID
	    FROM "sap.plc.db::basis.t_calculation_version" version
			INNER JOIN "sap.plc.db::basis.t_calculation" calculation ON version.calculation_id = calculation.calculation_id
			INNER JOIN "sap.plc.db::basis.t_project" project ON calculation.project_id = project.project_id
			INNER JOIN :lt_all_versions allVersions ON version.calculation_version_id = allVersions.calculation_version_id;

	lt_formula = SELECT
			FORMULA_ID,
			PATH,
			BUSINESS_OBJECT,
			COLUMN_ID,
			ITEM_CATEGORY_ID,
			IS_FORMULA_USED,
			FORMULA_STRING,
			FORMULA_DESCRIPTION
		FROM "sap.plc.db::basis.t_formula";

	lt_metadata = SELECT
			PATH,
			BUSINESS_OBJECT,
			COLUMN_ID,
			IS_CUSTOM,
			ROLLUP_TYPE_ID,
			REF_UOM_CURRENCY_PATH,
			REF_UOM_CURRENCY_BUSINESS_OBJECT,
			REF_UOM_CURRENCY_COLUMN_ID,
			UOM_CURRENCY_FLAG,
			SEMANTIC_DATA_TYPE,
			SEMANTIC_DATA_TYPE_ATTRIBUTES,
			PROPERTY_TYPE,
			IS_USABLE_IN_FORMULA
		FROM "sap.plc.db::basis.t_metadata";

	lt_metadata_item_attributes = SELECT
			PATH,
			BUSINESS_OBJECT,
			COLUMN_ID,
			ITEM_CATEGORY_ID,
			DEFAULT_VALUE
		FROM "sap.plc.db::basis.t_metadata_item_attributes";

	lt_item = SELECT
			item.CALCULATION_VERSION_ID,
			ITEM_ID,
			PARENT_ITEM_ID,
			IS_ACTIVE,
			HIGHLIGHT_GREEN,
			HIGHLIGHT_ORANGE,
			HIGHLIGHT_YELLOW,
			ITEM_CATEGORY_ID,
			CHILD_ITEM_CATEGORY_ID,
			ITEM_DESCRIPTION,
			REFERENCED_CALCULATION_VERSION_ID,
			COMMENT,
			ACCOUNT_ID,
			DOCUMENT_TYPE_ID,
			DOCUMENT_ID,
			DOCUMENT_VERSION,
			DOCUMENT_PART,
			DOCUMENT_STATUS_ID,
			DESIGN_OFFICE_ID,
			MATERIAL_ID,
			MATERIAL_TYPE_ID,
			MATERIAL_GROUP_ID,
			IS_PHANTOM_MATERIAL,
			IS_CONFIGURABLE_MATERIAL,
			MATERIAL_SOURCE,
			OVERHEAD_GROUP_ID,
			VALUATION_CLASS_ID,
			PURCHASING_GROUP,
			PURCHASING_DOCUMENT,
			LOCAL_CONTENT,
			ACTIVITY_TYPE_ID,
			PROCESS_ID,
			LOT_SIZE,
			LOT_SIZE_IS_MANUAL,
			ENGINEERING_CHANGE_NUMBER_ID,
			COMPANY_CODE_ID,
			COST_CENTER_ID,
			PLANT_ID,
			WORK_CENTER_ID,
			WORK_CENTER_CATEGORY,
			EFFICIENCY,
			BUSINESS_AREA_ID,
			PROFIT_CENTER_ID,
			QUANTITY,
			QUANTITY_IS_MANUAL,
			QUANTITY_UOM_ID,
			TOTAL_QUANTITY,
			TOTAL_QUANTITY_UOM_ID,
			TOTAL_QUANTITY_DEPENDS_ON,
			TOTAL_QUANTITY_OF_VARIANTS,
			IS_RELEVANT_TO_COSTING_IN_ERP,
			BASE_QUANTITY,
			BASE_QUANTITY_IS_MANUAL,
			PRICE_FIXED_PORTION,
			PRICE_FIXED_PORTION_IS_MANUAL,
			PRICE_VARIABLE_PORTION,
			PRICE_VARIABLE_PORTION_IS_MANUAL,
			TRANSACTION_CURRENCY_ID,
			PRICE_UNIT,
			PRICE_UNIT_IS_MANUAL,
			PRICE_UNIT_UOM_ID,
			IS_PRICE_SPLIT_ACTIVE,
			PRICE_ID,
			CONFIDENCE_LEVEL_ID,
			PRICE_SOURCE_ID,
			PRICE_SOURCE_TYPE_ID,
			SURCHARGE,
			IS_DISABLING_PRICE_DETERMINATION,
			VENDOR_ID,
			TARGET_COST,
			TARGET_COST_IS_MANUAL,
			TARGET_COST_CURRENCY_ID,
			CREATED_ON,
			CREATED_BY,
			LAST_MODIFIED_ON,
			LAST_MODIFIED_BY,
			TO_DECIMAL(NULL,28,7) as PRICE_FOR_TOTAL_QUANTITY_FIXED_PORTION,
			TO_DECIMAL(NULL,28,7) as PRICE_FOR_TOTAL_QUANTITY_VARIABLE_PORTION,
			TO_DECIMAL(NULL,28,7) as PRICE_FOR_TOTAL_QUANTITY2_FIXED_PORTION,
			TO_DECIMAL(NULL,28,7) as PRICE_FOR_TOTAL_QUANTITY2_VARIABLE_PORTION,
			TO_DECIMAL(NULL,28,7) as PRICE_FOR_TOTAL_QUANTITY3_FIXED_PORTION,
			TO_DECIMAL(NULL,28,7) as PRICE_FOR_TOTAL_QUANTITY3_VARIABLE_PORTION
	    FROM "sap.plc.db::basis.t_item" item
	    	INNER JOIN :lt_lifecycle_versions lifecycleVersions ON item.calculation_version_id = lifecycleVersions.calculation_version_id
	UNION ALL
		-- Add items of referenced versions which are needed for component split calculation.
		-- Only few item fields are actually needed for component split calculation, all other fields
		-- are set to NULL.
		SELECT
			item.CALCULATION_VERSION_ID,
			ITEM_ID,
			PARENT_ITEM_ID,
			IS_ACTIVE,
			NULL AS HIGHLIGHT_GREEN,
			NULL AS HIGHLIGHT_ORANGE,
			NULL AS HIGHLIGHT_YELLOW,
			ITEM_CATEGORY_ID,
			CHILD_ITEM_CATEGORY_ID,
			NULL AS ITEM_DESCRIPTION,
			REFERENCED_CALCULATION_VERSION_ID,
			NULL AS COMMENT,
			ACCOUNT_ID,
			NULL AS DOCUMENT_TYPE_ID,
			NULL AS DOCUMENT_ID,
			NULL AS DOCUMENT_VERSION,
			NULL AS DOCUMENT_PART,
			NULL AS DOCUMENT_STATUS_ID,
			NULL AS DESIGN_OFFICE_ID,
			NULL AS MATERIAL_ID,
			NULL AS MATERIAL_TYPE_ID,
			NULL AS MATERIAL_GROUP_ID,
			NULL AS IS_PHANTOM_MATERIAL,
			NULL AS IS_CONFIGURABLE_MATERIAL,
			NULL AS MATERIAL_SOURCE,
			OVERHEAD_GROUP_ID,
			NULL AS VALUATION_CLASS_ID,
			NULL AS PURCHASING_GROUP,
			NULL AS PURCHASING_DOCUMENT,
			NULL AS LOCAL_CONTENT,
			NULL AS ACTIVITY_TYPE_ID,
			NULL AS PROCESS_ID,
			NULL AS LOT_SIZE,
			NULL AS LOT_SIZE_IS_MANUAL,
			NULL AS ENGINEERING_CHANGE_NUMBER_ID,
			COMPANY_CODE_ID,
			NULL AS COST_CENTER_ID,
			PLANT_ID,
			NULL AS WORK_CENTER_ID,
			NULL AS WORK_CENTER_CATEGORY,
			NULL AS EFFICIENCY,
			BUSINESS_AREA_ID,
			PROFIT_CENTER_ID,
			NULL AS QUANTITY,
			NULL AS QUANTITY_IS_MANUAL,
			NULL AS QUANTITY_UOM_ID,
			TOTAL_QUANTITY,
			TOTAL_QUANTITY_UOM_ID,
			TOTAL_QUANTITY_DEPENDS_ON,
			TOTAL_QUANTITY_OF_VARIANTS,
			NULL AS IS_RELEVANT_TO_COSTING_IN_ERP,
			NULL AS BASE_QUANTITY,
			NULL AS BASE_QUANTITY_IS_MANUAL,
			NULL AS PRICE_FIXED_PORTION,
			NULL AS PRICE_FIXED_PORTION_IS_MANUAL,
			NULL AS PRICE_VARIABLE_PORTION,
			NULL AS PRICE_VARIABLE_PORTION_IS_MANUAL,
			TRANSACTION_CURRENCY_ID,
			PRICE_UNIT,
			PRICE_UNIT_IS_MANUAL,
			PRICE_UNIT_UOM_ID,
			IS_PRICE_SPLIT_ACTIVE,
		    PRICE_ID,
			NULL AS CONFIDENCE_LEVEL_ID,
			NULL AS PRICE_SOURCE_ID,
			NULL AS PRICE_SOURCE_TYPE_ID,
			NULL AS SURCHARGE,
			NULL AS IS_DISABLING_PRICE_DETERMINATION,
			NULL AS VENDOR_ID,
			NULL AS TARGET_COST,
			NULL AS TARGET_COST_IS_MANUAL,
			NULL AS TARGET_COST_CURRENCY_ID,
			NULL AS CREATED_ON,
			NULL AS CREATED_BY,
			NULL AS LAST_MODIFIED_ON,
			NULL AS LAST_MODIFIED_BY,
			PRICE_FOR_TOTAL_QUANTITY_FIXED_PORTION,
			PRICE_FOR_TOTAL_QUANTITY_VARIABLE_PORTION,
			PRICE_FOR_TOTAL_QUANTITY2_FIXED_PORTION,
			PRICE_FOR_TOTAL_QUANTITY2_VARIABLE_PORTION,
			PRICE_FOR_TOTAL_QUANTITY3_FIXED_PORTION,
			PRICE_FOR_TOTAL_QUANTITY3_VARIABLE_PORTION
	    FROM "sap.plc.db::basis.t_item" item
	    	INNER JOIN :lt_referenced_saved_versions refVersions ON item.calculation_version_id = refVersions.calculation_version_id;
	
	-- Custom fields are only required for lifecycle versions. Other referenced versions are already calculated.
	lt_item_ext = SELECT
			itemext.CALCULATION_VERSION_ID,
			ITEM_ID
			{{customFields Item}}
	    FROM "sap.plc.db::basis.t_item_ext" itemext
	    	INNER JOIN :lt_lifecycle_versions lifecycleVersions ON itemext.calculation_version_id = lifecycleVersions.calculation_version_id;
	    
	-- Only take saved costing sheet results for referenced versions that are not lifecylce versions at the same time.
	lt_saved_costing_sheets_results = SELECT
	        sheet.calculation_version_id,
		    item_id,
	        costing_sheet_row_id,
			costing_sheet_overhead_row_id,
	        account_id,
	        cost_fixed_portion,
	        cost_variable_portion,
			cost2_fixed_portion,
	        cost2_variable_portion,
			cost3_fixed_portion,
	        cost3_variable_portion
		FROM "sap.plc.db::basis.t_item_calculated_values_costing_sheet" sheet
	    	INNER JOIN :lt_referenced_saved_versions refVersions ON sheet.calculation_version_id = refVersions.calculation_version_id
		WHERE is_rolled_up_value=0;
		
	lt_account = SELECT DISTINCT
	        ACCOUNT_ID
	    FROM "sap.plc.db::basis.t_account";

	lt_account_group = SELECT
	        ACCOUNT_GROUP_ID,
	        CONTROLLING_AREA_ID,
	        COST_PORTION,
	        _VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_account_group";

	lt_account_account_group = SELECT
	        FROM_ACCOUNT_ID,
	        TO_ACCOUNT_ID,
	        ACCOUNT_GROUP_ID,
	        _VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_account_account_group";

	lt_costing_sheet = SELECT
	        COSTING_SHEET_ID,
	        CONTROLLING_AREA_ID,
	        _VALID_FROM,
	        _VALID_TO,
			IS_TOTAL_COST2_ENABLED,
			IS_TOTAL_COST3_ENABLED
	    FROM "sap.plc.db::basis.t_costing_sheet";

	lt_costing_sheet_row = SELECT
	        COSTING_SHEET_ROW_ID,
	        COSTING_SHEET_ID,
	        COSTING_SHEET_ROW_TYPE,
	        COSTING_SHEET_BASE_ID,
	        ACCOUNT_GROUP_AS_BASE_ID,
	        COSTING_SHEET_OVERHEAD_ID,
	        CALCULATION_ORDER,
	        _VALID_FROM,
	        _VALID_TO,
			IS_RELEVANT_FOR_TOTAL,
			IS_RELEVANT_FOR_TOTAL2,
			IS_RELEVANT_FOR_TOTAL3
	    FROM "sap.plc.db::basis.t_costing_sheet_row";

	lt_costing_sheet_row_dependencies = SELECT
	        SOURCE_ROW_ID,
	        TARGET_ROW_ID,
	        COSTING_SHEET_ID,
	        _VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_costing_sheet_row_dependencies";
	    	
	lt_costing_sheet_base = SELECT
	        COSTING_SHEET_BASE_ID,
	        COST_PORTION,
	        _VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_costing_sheet_base";

	lt_costing_sheet_base_row = SELECT
	        COSTING_SHEET_BASE_ID,
	        CHILD_ITEM_CATEGORY_ID as ITEM_CATEGORY_ID,
	        SUBITEM_STATE,
	        _VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_costing_sheet_base_row";

	lt_costing_sheet_overhead = SELECT
	        COSTING_SHEET_OVERHEAD_ID,
	        CREDIT_ACCOUNT_ID,
	        CREDIT_FIXED_COST_PORTION,
	        IS_ROLLED_UP,
	        _VALID_FROM,
	        _VALID_TO,
            USE_DEFAULT_FIXED_COST_PORTION
	    FROM "sap.plc.db::basis.t_costing_sheet_overhead";

	lt_costing_sheet_overhead_row = SELECT
	        COSTING_SHEET_OVERHEAD_ROW_ID,
	        COSTING_SHEET_OVERHEAD_ID,
	        VALID_FROM,
	        VALID_TO,
	        CONTROLLING_AREA_ID,
	        COMPANY_CODE_ID,
	        BUSINESS_AREA_ID,
	        PROFIT_CENTER_ID,
	        PLANT_ID,
	        OVERHEAD_GROUP_ID,
	        OVERHEAD_PERCENTAGE,
	        PROJECT_ID,
	        ACTIVITY_TYPE_ID,
	        COST_CENTER_ID,
	        WORK_CENTER_ID,
	        OVERHEAD_QUANTITY_BASED,
	        OVERHEAD_CURRENCY_ID,
	        OVERHEAD_PRICE_UNIT,
	        OVERHEAD_PRICE_UNIT_UOM_ID,
	        _VALID_FROM,
	        _VALID_TO,
            CREDIT_FIXED_COST_PORTION as FIXED_COST_OVERHEAD_PERCENTAGE,
			FORMULA_ID
	    FROM "sap.plc.db::basis.t_costing_sheet_overhead_row";
	
	lt_costing_sheet_overhead_row_formula = SELECT 
			formula.FORMULA_ID,
			formula.FORMULA_STRING,
			formula.FORMULA_DESCRIPTION,
			overhead_row.COSTING_SHEET_OVERHEAD_ID,
			overhead_row.COSTING_SHEET_OVERHEAD_ROW_ID,
			formula.OVERHEAD_CUSTOM
		FROM "sap.plc.db::basis.t_costing_sheet_overhead_row_formula" formula, "sap.plc.db::basis.t_costing_sheet_overhead_row" overhead_row
		WHERE formula.FORMULA_ID = overhead_row.FORMULA_ID; 

	lt_component_split = SELECT
	        COMPONENT_SPLIT_ID,
	        CONTROLLING_AREA_ID,
			_VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_component_split";

	lt_component_split_account_group = SELECT
	        ACCOUNT_GROUP_ID,
	        COMPONENT_SPLIT_ID,
	        _VALID_FROM,
	        _VALID_TO
	    FROM "sap.plc.db::basis.t_component_split_account_group";

	lt_uom = SELECT
			UOM_ID,
			DIMENSION_ID,
			NUMERATOR,
			DENOMINATOR,
			EXPONENT_BASE10,
			SI_CONSTANT,
			_VALID_FROM,
			_VALID_TO
	    FROM "sap.plc.db::basis.t_uom";

	lt_currency = SELECT
			EXCHANGE_RATE_TYPE_ID,
			FROM_CURRENCY_ID,
			TO_CURRENCY_ID,
			RATE,
			FROM_FACTOR,
			TO_FACTOR,
			VALID_FROM,
			_VALID_FROM,
			_VALID_TO
	    FROM "sap.plc.db::basis.t_currency_conversion";

	lt_item_price_components = SELECT 
	                                     price_components.PRICE_FIXED,
									     price_components.PRICE_VARIABLE,
									     items.ITEM_ID,
										 items.CALCULATION_VERSION_ID,
										 price_components.ACCOUNT_ID
                                    FROM "sap.plc.db::basis.t_price_component" as price_components  
	                                INNER JOIN :lt_item AS items 
	                                	ON items.price_id = price_components.price_id
									INNER JOIN "sap.plc.db::basis.t_activity_price" as activity_price
										on price_components.PRICE_ID = activity_price.PRICE_ID
									and price_components._VALID_FROM = activity_price._VALID_FROM
									INNER JOIN :lt_calculation_header version
										on items.CALCULATION_VERSION_ID = version.CALCULATION_VERSION_ID
									where activity_price._VALID_FROM <= version.MASTER_DATA_TIMESTAMP and 
										(activity_price._VALID_TO is null or activity_price._VALID_TO > version.MASTER_DATA_TIMESTAMP)
									and price_components.controlling_area_id = version.CONTROLLING_AREA_ID and
										activity_price.VALID_FROM <= version.VALUATION_DATE and 
										(activity_price.VALID_TO is null or activity_price.VALID_TO >= version.VALUATION_DATE)
								UNION ALL
								SELECT 
	                                     price_components.PRICE_FIXED,
									     price_components.PRICE_VARIABLE,
									     items.ITEM_ID,
										 items.CALCULATION_VERSION_ID,
										 price_components.ACCOUNT_ID 
                                    FROM "sap.plc.db::basis.t_price_component" as price_components  
	                                INNER JOIN :lt_item AS items 
	                                	ON items.price_id = price_components.price_id
									INNER JOIN "sap.plc.db::basis.t_material_price" as material_price
										on price_components.PRICE_ID = material_price.PRICE_ID
									and price_components._VALID_FROM = material_price._VALID_FROM
									INNER JOIN :lt_calculation_header version
										on items.CALCULATION_VERSION_ID = version.CALCULATION_VERSION_ID
									where material_price._VALID_FROM <= version.MASTER_DATA_TIMESTAMP and 
										(material_price._VALID_TO is null or material_price._VALID_TO > version.MASTER_DATA_TIMESTAMP)
									and price_components.controlling_area_id = version.CONTROLLING_AREA_ID and
										material_price.VALID_FROM <= version.VALUATION_DATE and 
										(material_price.VALID_TO is null or material_price.VALID_TO >= version.VALUATION_DATE);	

	CALL PLC_AREA_CALCULATE_FOR_SAVE_PROC(
		:lt_calculation_header,
		:lt_formula, :lt_metadata, :lt_metadata_item_attributes,
		:lt_item, :lt_item_ext, :lt_saved_costing_sheets_results, :lt_referenced_version_component_split,
		:lt_account, :lt_account_group, :lt_account_account_group,
		:lt_costing_sheet, :lt_costing_sheet_row, :lt_costing_sheet_row_dependencies, :lt_costing_sheet_base, :lt_costing_sheet_base_row,
		:lt_costing_sheet_overhead, :lt_costing_sheet_overhead_row, :lt_costing_sheet_overhead_row_formula,
		:lt_component_split, :lt_component_split_account_group, :lt_uom, :lt_currency, :lt_item_price_components,
		lt_item_calculated_prices, lt_item_calculated_values_costing_sheet, lt_item_calculated_values_component_split, lt_result_component_split, errors);


	-- delete not required referenced component split results
	DELETE FROM "sap.plc.db::basis.t_item_referenced_version_component_split"
		WHERE master_calculation_version_id in (SELECT calculation_version_id FROM :lt_lifecycle_versions);
			
	-- save newly calculated component split results of referenced calculation versions
	INSERT INTO "sap.plc.db::basis.t_item_referenced_version_component_split"
		SELECT
		    result.master_calculation_version_id,
		    result.referenced_calculation_version_id,
		    version.component_split_id,
		    result.cost_component_id,
		    result.account_id,
		    result.cost_fixed_portion,
		    result.cost_variable_portion,
			result.cost2_fixed_portion,
	        result.cost2_variable_portion,
			result.cost3_fixed_portion,
	        result.cost3_variable_portion
		FROM :lt_result_component_split result 
			INNER JOIN "sap.plc.db::basis.t_calculation_version" version ON result.master_calculation_version_id = version.calculation_version_id
	    	INNER JOIN :lt_lifecycle_versions lifecycleVersions ON result.master_calculation_version_id = lifecycleVersions.calculation_version_id;

	-- save calculated fields in item table
	UPDATE "sap.plc.db::basis.t_item" AS stored
		SET
	        quantity_calculated = calculated.quantity,
	        base_quantity_calculated = calculated.base_quantity,
	        total_quantity = calculated.total_quantity,
	        total_quantity_uom_id = calculated.total_quantity_uom_id,
	        quantity_per_base_unit = calculated.quantity_per_base_unit,
	        quantity_per_base_unit_uom_id = calculated.quantity_per_base_unit_uom_id,
	        price_unit_calculated = calculated.price_unit,
	        target_cost_calculated = calculated.target_cost,
	        lot_size_calculated = calculated.lot_size,
	        price_fixed_portion_calculated = calculated.price_fixed_portion,
	        price_variable_portion_calculated = calculated.price_variable_portion,
	        price_for_total_quantity = calculated.price_for_total_quantity,
	        price_for_total_quantity_fixed_portion = calculated.price_for_total_quantity_fixed_portion,
	        price_for_total_quantity_variable_portion = calculated.price_for_total_quantity_variable_portion,
			price_for_total_quantity2 = calculated.price_for_total_quantity2,
	        price_for_total_quantity2_fixed_portion = calculated.price_for_total_quantity2_fixed_portion,
	        price_for_total_quantity2_variable_portion = calculated.price_for_total_quantity2_variable_portion,
			price_for_total_quantity3 = calculated.price_for_total_quantity3,
	        price_for_total_quantity3_fixed_portion = calculated.price_for_total_quantity3_fixed_portion,
	        price_for_total_quantity3_variable_portion = calculated.price_for_total_quantity3_variable_portion,
	        other_cost = calculated.other_cost,
	        other_cost_fixed_portion = calculated.other_cost_fixed_portion,
	        other_cost_variable_portion = calculated.other_cost_variable_portion,
	        total_cost = calculated.total_cost,
	        total_cost_fixed_portion = calculated.total_cost_fixed_portion,
	        total_cost_variable_portion = calculated.total_cost_variable_portion,
			total_cost2 = calculated.total_cost2,
	        total_cost2_fixed_portion = calculated.total_cost2_fixed_portion,
	        total_cost2_variable_portion = calculated.total_cost2_variable_portion,
			total_cost3 = calculated.total_cost3,
	        total_cost3_fixed_portion = calculated.total_cost3_fixed_portion,
	        total_cost3_variable_portion = calculated.total_cost3_variable_portion,
	        total_cost_per_unit_fixed_portion = calculated.total_cost_per_unit_fixed_portion,
	        total_cost_per_unit_variable_portion = calculated.total_cost_per_unit_variable_portion,
	        total_cost_per_unit = calculated.total_cost_per_unit,
			total_cost2_per_unit_fixed_portion = calculated.total_cost2_per_unit_fixed_portion,
	        total_cost2_per_unit_variable_portion = calculated.total_cost2_per_unit_variable_portion,
	        total_cost2_per_unit = calculated.total_cost2_per_unit,
			total_cost3_per_unit_fixed_portion = calculated.total_cost3_per_unit_fixed_portion,
	        total_cost3_per_unit_variable_portion = calculated.total_cost3_per_unit_variable_portion,
	        total_cost3_per_unit = calculated.total_cost3_per_unit,
			bom_compare_key = calculated.bom_compare_key
		FROM "sap.plc.db::basis.t_item" AS stored 
			INNER JOIN :lt_item_calculated_prices AS calculated	ON stored.item_id = calculated.item_id AND stored.calculation_version_id = calculated.calculation_version_id
			INNER JOIN :lt_lifecycle_versions lifecycleVersions ON stored.calculation_version_id = lifecycleVersions.calculation_version_id;

	-- delete old calculation results
	DELETE FROM "sap.plc.db::basis.t_item_calculated_values_costing_sheet"
		WHERE calculation_version_id in (SELECT calculation_version_id FROM :lt_lifecycle_versions);

	DELETE FROM "sap.plc.db::basis.t_item_calculated_values_component_split"
		WHERE calculation_version_id in (SELECT calculation_version_id FROM :lt_lifecycle_versions);

	-- save costing sheet results
	INSERT INTO "sap.plc.db::basis.t_item_calculated_values_costing_sheet"
		SELECT
	        item_id,
	        sheet.calculation_version_id,
	        costing_sheet_row_id,
			costing_sheet_overhead_row_id,
	        account_id,
	        is_rolled_up_value,
	        has_subitems,
	        cost,
	        cost_fixed_portion,
	        cost_variable_portion,
			cost2,
	        cost2_fixed_portion,
	        cost2_variable_portion,
			cost3,
	        cost3_fixed_portion,
	        cost3_variable_portion
    	FROM :lt_item_calculated_values_costing_sheet sheet
		    INNER JOIN :lt_lifecycle_versions lifecycleVersions ON sheet.calculation_version_id = lifecycleVersions.calculation_version_id;

	-- save component split results
	INSERT INTO "sap.plc.db::basis.t_item_calculated_values_component_split"
		SELECT
	        item_id,
	        split.calculation_version_id,
	        component_split_id,
	        cost_component_id,
	        account_id,
	        cost,
	        cost_fixed_portion,
	        cost_variable_portion,
			cost2,
	        cost2_fixed_portion,
	        cost2_variable_portion,
			cost3,
	        cost3_fixed_portion,
	        cost3_variable_portion
		FROM :lt_item_calculated_values_component_split split
		    INNER JOIN :lt_lifecycle_versions lifecycleVersions ON split.calculation_version_id = lifecycleVersions.calculation_version_id;

{{#if Item.hasCalculatedCustomFields}}
       -- save calculated custom fields
       UPDATE "sap.plc.db::basis.t_item_ext" AS stored
              SET
              	{{ddl_updateCustomFieldsCalculated Item}}
            FROM "sap.plc.db::basis.t_item_ext" AS stored 
            	INNER JOIN :lt_item_calculated_prices AS calculated ON stored.item_id = calculated.item_id AND stored.calculation_version_id = calculated.calculation_version_id
			    INNER JOIN :lt_lifecycle_versions lifecycleVersions ON stored.calculation_version_id = lifecycleVersions.calculation_version_id;
{{/if}}

END


