FUNCTION "sap.plc.analytics.viewsCF.base::TABLE_FUNCTION_v_bas_meas_project_costing_sheet_cust" (
		projectId NVARCHAR(5000) default '',
		VAR_ONLY_CURRENT TINYINT
	)
	RETURNS TABLE (
		"PROJECT_ID" NVARCHAR (35),
		"CALCULATION_VERSION_ID" INTEGER,
		"ITEM_ID" INTEGER,
		"IS_ROLLED_UP_VALUE" TINYINT,
		"IS_OVERHEAD_ROLLED_UP" TINYINT,
		"COSTING_SHEET_ROW_ID" NVARCHAR (5),
		"COSTING_SHEET_ROW_TYPE" NVARCHAR (20),
		"COSTING_SHEET_OVERHEAD_ROW_ID" INTEGER,
		"ACCOUNT_ID" NVARCHAR (10),
		"COST" DECIMAL (28, 7),
		"COST_FIXED_PORTION" DECIMAL (28, 7),
		"COST_VARIABLE_PORTION" DECIMAL (28, 7),
		"TOTAL_COST_PER_UNIT" DECIMAL (28, 7),
		"COST2" DECIMAL (28, 7),
		"COST2_FIXED_PORTION" DECIMAL (28, 7),
		"COST2_VARIABLE_PORTION" DECIMAL (28, 7),
		"TOTAL_COST2_PER_UNIT" DECIMAL (28, 7),
		"COST3" DECIMAL (28, 7),
		"COST3_FIXED_PORTION" DECIMAL (28, 7),
		"COST3_VARIABLE_PORTION" DECIMAL (28, 7),
		"TOTAL_COST3_PER_UNIT" DECIMAL (28, 7),
		"PRICE" DECIMAL (28, 7),
		"PRICE_FIXED_PORTION" DECIMAL (28, 7),
		"PRICE_VARIABLE_PORTION" DECIMAL (28, 7),
		"TRANSACTION_CURRENCY_ID" NVARCHAR (3),
		"PRICE_UNIT" DECIMAL (28, 7),
		"PRICE_UNIT_UOM_ID" NVARCHAR (3),
		"COST_PER_UNIT" DECIMAL(28, 7),
		"COST_FIXED_PER_UNIT" DECIMAL(28, 7),
		"COST_VARIABLE_PER_UNIT" DECIMAL(28, 7),
		"COST2_PER_UNIT" DECIMAL(28, 7),
		"COST2_FIXED_PER_UNIT" DECIMAL(28, 7),
		"COST2_VARIABLE_PER_UNIT" DECIMAL(28, 7),
		"COST3_PER_UNIT" DECIMAL(28, 7),
		"COST3_FIXED_PER_UNIT" DECIMAL(28, 7),
		"COST3_VARIABLE_PER_UNIT" DECIMAL(28, 7),
		"REPORT_CURRENCY_ID" NVARCHAR (3),
		"TOTAL_QUANTITY" DECIMAL (28, 7),
		"TOTAL_QUANTITY_UOM_ID" NVARCHAR (3),
		"TARGET_COST" DECIMAL (28, 7),
		"TARGET_COST_CURRENCY_ID" NVARCHAR (3),
		"SALES_PRICE"  DECIMAL (28, 7),
		"SALES_PRICE_CURRENCY_ID" NVARCHAR (3),
		"PROJECT_SALES_PRICE" DECIMAL (28, 7),
		"PROJECT_SALES_PRICE_CURRENCY_ID" NVARCHAR (3),
		"TOTAL_QUANTITY_OF_VARIANTS" DECIMAL (28, 7)
		{{#if Item.customFields}}
			{{cv_customFieldsTableFunctList Item}}
	{{/if}}
)

	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER AS 
BEGIN



-- Add item-related measures like prices to costs
var_out = SELECT
		project.project_id,
       	csvalues.calculation_version_id,
       	csvalues.item_id,
       	csvalues.is_rolled_up_value, 
       	csvalues.is_overhead_rolled_up, 
       	csvalues.costing_sheet_row_id,  
       	csvalues.costing_sheet_row_type,
       	csvalues.costing_sheet_overhead_row_id,
	   	csvalues.account_id,        
       	csvalues.cost, 
       	csvalues.cost_fixed_portion, 
		csvalues.cost_variable_portion,
		itemcosts.total_cost_per_unit,
		csvalues.cost2, 
       	csvalues.cost2_fixed_portion, 
		csvalues.cost2_variable_portion,
		itemcosts.total_cost2_per_unit,
		csvalues.cost3, 
       	csvalues.cost3_fixed_portion, 
		csvalues.cost3_variable_portion,
		itemcosts.total_cost3_per_unit,
		itemcosts.price,
	    itemcosts.price_fixed_portion,
	    itemcosts.price_variable_portion,
	    itemcosts.transaction_currency_id,
		itemcosts.price_unit,
		itemcosts.price_unit_uom_id,
       CASE WHEN csvalues.total_quantity > 0 
       		THEN (csvalues.cost / csvalues.total_quantity)
       		ELSE null
       END as cost_per_unit,      
       CASE WHEN csvalues.total_quantity > 0 
       		THEN (csvalues.cost_fixed_portion / csvalues.total_quantity)
       		ELSE null
       END as cost_fixed_per_unit,      
       CASE WHEN csvalues.total_quantity > 0 
       		THEN (csvalues.cost_variable_portion / csvalues.total_quantity)
       		ELSE null
       END as cost_variable_per_unit, 
	   -- 2
	   CASE WHEN csvalues.total_quantity > 0 
		THEN (csvalues.cost2 / csvalues.total_quantity)
		ELSE null
		END as cost2_per_unit,      
		CASE WHEN csvalues.total_quantity > 0 
				THEN (csvalues.cost2_fixed_portion / csvalues.total_quantity)
				ELSE null
		END as cost2_fixed_per_unit,      
		CASE WHEN csvalues.total_quantity > 0 
				THEN (csvalues.cost2_variable_portion / csvalues.total_quantity)
				ELSE null
		END as cost2_variable_per_unit,
		-- 3 
		CASE WHEN csvalues.total_quantity > 0 
			THEN (csvalues.cost3 / csvalues.total_quantity)
			ELSE null
		END as cost3_per_unit,      
		CASE WHEN csvalues.total_quantity > 0 
			THEN (csvalues.cost3_fixed_portion / csvalues.total_quantity)
			ELSE null
		END as cost3_fixed_per_unit,      
		CASE WHEN csvalues.total_quantity > 0 
			THEN (csvalues.cost3_variable_portion / csvalues.total_quantity)
			ELSE null
		END as cost3_variable_per_unit, 
		csvalues.report_currency_id,
		csvalues.total_quantity,
		csvalues.total_quantity_uom_id,
       CASE item.target_cost_is_manual
			WHEN 0 THEN item.target_cost_calculated
			ELSE item.target_cost
		END as target_cost,
	    item.target_cost_currency_id,
       	calcVersion.sales_price,
		calcVersion.sales_price_currency_id,
		project.sales_price as project_sales_price,
		project.sales_price_currency_id as project_sales_price_currency_id,
		itemcosts.total_quantity_of_variants
		{{#if Item.customFields}}
			{{cv_customFieldsTableFunctSelect Item}}
		{{/if}}
		
FROM "sap.plc.analytics.views.base::v_sql_meas_project_costing_sheet_w_costs" csvalues

	INNER JOIN "sap.plc.db::basis.t_item" item
			ON item.calculation_version_id = csvalues.calculation_version_id
			AND item.item_id = csvalues.item_id

	INNER JOIN "sap.plc.db.authorization::privileges.v_calculation_version_read" calcVersion
			ON calcVersion.calculation_version_id = csvalues.calculation_version_id
			AND upper(calcVersion.USER_ID) = upper(SESSION_CONTEXT('XS_APPLICATIONUSER'))
	
	INNER JOIN (SELECT * FROM "sap.plc.analytics.views.base::f_sql_meas_item_costs_view"(:projectId, '')) itemcosts
		ON item.calculation_version_id = itemcosts.calculation_version_id
			AND item.item_id = itemcosts.item_id
			
	INNER JOIN "sap.plc.db::basis.t_calculation" calc
			ON calc.calculation_id = calcVersion.calculation_id
			
	INNER JOIN "sap.plc.db::basis.t_project" project
			ON project.project_id = calc.project_id	
	
	
	{{#if Item.customFields}}
		LEFT OUTER JOIN {{t_extensionTable Item}} plcExtTable ON plcExtTable.item_id = csvalues.item_id AND plcExtTable.calculation_version_id = csvalues.calculation_version_id
	{{/if}}
WHERE
		-- Select only Calculation Versions Root Item w/o Children
		item.parent_item_id IS NULL
		
		-- Limit selection to either Current Calculation Versions or to Current && Non-Current Calculation Versions
		AND ( case when :VAR_ONLY_CURRENT = 1
        		then ( case when calc.current_calculation_version_id = calcVersion.calculation_version_id then 1 else 0 end )
            	else 1 end
            ) = 1;

return :var_out;
END;