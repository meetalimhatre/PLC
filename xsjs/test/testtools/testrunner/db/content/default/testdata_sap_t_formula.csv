FORMULA_ID,PATH,BUSINESS_OBJECT,COLUMN_ID,ITEM_CATEGORY_ID,IS_FORMULA_USED,FORMULA_STRING,FORMULA_DESCRIPTION
0,Item,Item,CUST_INT_FORMULA,1,1,ABS($CUST_DECIMAL_WITHOUT_REF)*2,Reference of a custom field and going from decimal to int. With UoM function and arithmetics . Formula only computed for one of the two valid item categories
1,Item,Item,CUST_INT_FORMULA,2,1,ABS($CUST_DECIMAL_WITHOUT_REF)*2,Reference of a custom field and going from decimal to int. With UoM function and arithmetics . Formula only computed for one of the two valid item categories
2,Item,Item,CUST_DECIMAL_FORMULA,2,1,$TOTAL_COST + $CUST_INT_FORMULA + PARENT_NUMBER_OF_CHILDREN(),Reference of a standard field and a custom field with currency and arithmetics and a function returning an integer . Valid item category is the intersection of valid itemcategories of all referenced fields. TOTAL_COST's valid item categories are Document Material InternalActivity ExternalActivity Process Subcontracting ResourcesAndTools VariableItem
3,Item,Item,CUST_STRING_FORMULA,7,1,IF ($IS_ACTIVE; 'The Item is active.'; 'The item is inactive.') + ' This is the content of the manually maintained custom field CUST_STRING: ' + $CUST_STRING,If-statement string concatenation with the manually maintained custom field CUST_STRING and no rollup
4,Item,Item,CUST_STRING_FORMULA,8,1,IF ($IS_ACTIVE; 'The Item is active.'; 'The item is inactive.') + ' This is the content of the manually maintained custom field CUST_STRING: ' + $CUST_STRING,If-statement string concatenation with the manually maintained custom field CUST_STRING and no rollup
5,Item,Item,CUST_STRING_FORMULA,9,1,IF ($IS_ACTIVE; 'The Item is active.'; 'The item is inactive.') + ' This is the content of the manually maintained custom field CUST_STRING: ' + $CUST_STRING,If-statement string concatenation with the manually maintained custom field CUST_STRING and no rollup
6,Item,Item,QUANTITY,1,1,$CUST_INT_FORMULA + 1,3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
7,Item,Item,QUANTITY,2,1,$CUST_INT_FORMULA + 1,3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
8,Item,Item,PRICE_FIXED_PORTION,1,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
9,Item,Item,PRICE_FIXED_PORTION,2,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
10,Item,Item,PRICE_FIXED_PORTION,3,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
11,Item,Item,PRICE_FIXED_PORTION,4,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
12,Item,Item,PRICE_FIXED_PORTION,5,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
13,Item,Item,PRICE_FIXED_PORTION,6,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overridden by a formula are not rolled-up. Those are QUANTITY TARGET_COST and LOT_SIZE. As representative example we take the first for testing. In particular formula-computed values are possible and valid for assemblies and they also can be manually overriden for assemblies.
14,Item,Item,PRICE_FIXED_PORTION,7,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overriden by a formula represent a special case. Those are PRICE_FIXED_PORTION PRICE_VARIABLE_PORTION and PRICE_UNIT.
15,Item,Item,PRICE_FIXED_PORTION,8,1,IF (IS_MATERIAL(); 10; 1),3 of the 6 standard fields which can be overriden by a formula represent a special case. Those are PRICE_FIXED_PORTION PRICE_VARIABLE_PORTION and PRICE_UNIT.
16,Item,Item,PRICE_VARIABLE_PORTION,1,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
17,Item,Item,PRICE_VARIABLE_PORTION,2,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
18,Item,Item,PRICE_VARIABLE_PORTION,3,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
19,Item,Item,PRICE_VARIABLE_PORTION,4,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
20,Item,Item,PRICE_VARIABLE_PORTION,5,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
21,Item,Item,PRICE_VARIABLE_PORTION,6,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
22,Item,Item,PRICE_VARIABLE_PORTION,7,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
23,Item,Item,PRICE_VARIABLE_PORTION,8,1,IF (IS_INTERNAL_ACTIVITY(); 2; 1),See Comment of PRICE_FIXED_PORTION
24,Item,Item,PRICE_UNIT,1,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
25,Item,Item,PRICE_UNIT,2,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
26,Item,Item,PRICE_UNIT,3,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
27,Item,Item,PRICE_UNIT,4,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
28,Item,Item,PRICE_UNIT,5,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
29,Item,Item,PRICE_UNIT,6,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
30,Item,Item,PRICE_UNIT,7,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.
31,Item,Item,PRICE_UNIT,8,1,IF (IS_EXTERNAL_ACTIVITY(); 5; 1),PRICE_UNIT is not rolled-up. Instead PRICE_UNIT is always set to 1 by the calculation engine  for assemblies. Therefore having a formula-computed value i.e. PRICE_UNIT_CALCULATED does not make sense for assemblies.