PROCEDURE "sap.plc.db.masterdata_replication.procedures::p_update_t_document"(
    IN INPUT_TABLE TABLE (
    	"DOCUMENT_TYPE_ID" NVARCHAR(3),
    	"DOCUMENT_ID" NVARCHAR(40),
    	"DOCUMENT_VERSION" NVARCHAR(2),
    	"DOCUMENT_PART" NVARCHAR(3),
    	"IS_CREATED_VIA_CAD_INTEGRATION" TINYINT,
    	"DOCUMENT_STATUS_ID" NVARCHAR(2),
    	"DESIGN_OFFICE_ID" NVARCHAR(3),
    	"_SOURCE" TINYINT -- 1: PLC / 2: ERP
    ),
    OUT OV_PROCESSED_ROWS INTEGER
) 
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

as

    lv_current_user nvarchar(256);
    lv_current_utctimestamp	timestamp;
    lv_rows_count integer;
    lv_run_id nvarchar(50);

BEGIN

    select SESSION_CONTEXT('APPLICATIONUSER')
        into lv_current_user
        from "sap.plc.db::DUMMY";

    select current_utctimestamp 
        into lv_current_utctimestamp 
        from "sap.plc.db::DUMMY";

    SELECT SESSION_CONTEXT('SCHEDULER_RUN_ID') 
        INTO lv_run_id 
        FROM "sap.plc.db::DUMMY";    

    -- Insert into general Error Table
    INSERT INTO "sap.plc.db::map.t_replication_log" (
        FIELD_NAME ,
        FIELD_VALUE,
        MESSAGE_TEXT ,
        MESSAGE_TIME ,
        MESSAGE_TYPE ,
        TABLE_NAME,
        OPERATION,
        RUN_ID
    )
        select 
            'DOCUMENT_TYPE_ID'                                                  as FIELD_NAME ,
            it.DOCUMENT_TYPE_ID                                                 as FIELD_VALUE,
            'Unknown Document Type ID for Document ID ' || it.DOCUMENT_ID       as MESSAGE_TEXT ,
            lv_current_utctimestamp                                             as MESSAGE_TIME ,
            'ERROR'                                                             as MESSAGE_TYPE ,
            't_document'                                                        as TABLE_NAME ,
            'Replication_Update'                                                as OPERATION ,
            :lv_run_id                                                          as RUN_ID
        from :INPUT_TABLE as it
        where it.DOCUMENT_TYPE_ID not in (select DOCUMENT_TYPE_ID from "sap.plc.db::basis.t_document_type")
    ;

    INSERT INTO "sap.plc.db::map.t_replication_log" (
        FIELD_NAME ,
        FIELD_VALUE,
        MESSAGE_TEXT ,
        MESSAGE_TIME ,
        MESSAGE_TYPE ,
        TABLE_NAME,
        OPERATION,
        RUN_ID
    )
        select 
            'DOCUMENT_STATUS_ID'                                                    as FIELD_NAME ,
            it.DOCUMENT_STATUS_ID                                                   as FIELD_VALUE,
            'Unknown Document Status ID for Document ID ' || it.DOCUMENT_ID         as MESSAGE_TEXT ,
            lv_current_utctimestamp                                                 as MESSAGE_TIME ,
            'ERROR'                                                                 as MESSAGE_TYPE ,
            't_document'                                                            as TABLE_NAME ,
            'Replication_Update'                                                    as OPERATION ,
            :lv_run_id                                                              as RUN_ID
        from :INPUT_TABLE as it
        where it.DOCUMENT_STATUS_ID is not null and it.DOCUMENT_STATUS_ID not in (select DOCUMENT_STATUS_ID from "sap.plc.db::basis.t_document_status")
    ;

    lt_update_records =
        select distinct it.DOCUMENT_TYPE_ID, it.DOCUMENT_ID, it.DOCUMENT_VERSION, it.DOCUMENT_PART, it.IS_CREATED_VIA_CAD_INTEGRATION, it.DOCUMENT_STATUS_ID, it.DESIGN_OFFICE_ID, it._SOURCE
        from 
         (select *,
             Count(*) OVER (PARTITION BY DOCUMENT_TYPE_ID, DOCUMENT_ID, DOCUMENT_VERSION, DOCUMENT_PART) AS DUPLICATE_KEY_COUNT
             from :INPUT_TABLE
         ) as it
        where 
    		it.DUPLICATE_KEY_COUNT = 1 
        and it.DOCUMENT_TYPE_ID in (select DOCUMENT_TYPE_ID from "sap.plc.db::basis.t_document_type") 
        and (IFNULL(it.DOCUMENT_STATUS_ID,'') = '' or it.DOCUMENT_STATUS_ID in (select DOCUMENT_STATUS_ID from "sap.plc.db::basis.t_document_status") )
            -- ignore unchanged records 
		except
		  (select std.DOCUMENT_TYPE_ID, std.DOCUMENT_ID, std.DOCUMENT_VERSION, std.DOCUMENT_PART, std.IS_CREATED_VIA_CAD_INTEGRATION, std.DOCUMENT_STATUS_ID, std.DESIGN_OFFICE_ID,  std._SOURCE
		        from "sap.plc.db::basis.t_document" as std
		        where _VALID_TO IS NULL
                AND (std.DOCUMENT_TYPE_ID, std.DOCUMENT_ID, std.DOCUMENT_VERSION, std.DOCUMENT_PART) in (select DOCUMENT_TYPE_ID, DOCUMENT_ID, DOCUMENT_VERSION, DOCUMENT_PART from :INPUT_TABLE));
              
    SELECT COUNT(DOCUMENT_ID) into lv_rows_count from :lt_update_records;
    OV_PROCESSED_ROWS = :lv_rows_count;
    
    if (:lv_rows_count > 0) then
        
        -- outdate the old timestamp
    	UPDATE "sap.plc.db::basis.t_document" as tbl
    		SET _VALID_TO = :lv_current_utctimestamp , _CREATED_BY = :lv_current_user  
    		WHERE 
    		      (tbl.DOCUMENT_TYPE_ID, tbl.DOCUMENT_ID, tbl.DOCUMENT_VERSION, tbl.DOCUMENT_PART)
    		      in (select DOCUMENT_TYPE_ID, DOCUMENT_ID, DOCUMENT_VERSION, DOCUMENT_PART
    			      from :lt_update_records as upd 
    			      where upd.DOCUMENT_TYPE_ID = tbl.DOCUMENT_TYPE_ID
    			        and upd.DOCUMENT_ID = tbl.DOCUMENT_ID
    			        and upd.DOCUMENT_VERSION = tbl.DOCUMENT_VERSION
    			        and upd.DOCUMENT_PART = tbl.DOCUMENT_PART
    		      )
    			  AND tbl._VALID_FROM < :lv_current_utctimestamp 
    			  AND tbl._VALID_TO IS NULL;
    	
    	-- insert the new entries
    	INSERT INTO  "sap.plc.db::basis.t_document" 
    		(DOCUMENT_TYPE_ID, DOCUMENT_ID, DOCUMENT_VERSION, DOCUMENT_PART, IS_CREATED_VIA_CAD_INTEGRATION, DOCUMENT_STATUS_ID, DESIGN_OFFICE_ID, _VALID_FROM, _VALID_TO, _SOURCE, _CREATED_BY )
    		select DOCUMENT_TYPE_ID, DOCUMENT_ID, DOCUMENT_VERSION, DOCUMENT_PART, IS_CREATED_VIA_CAD_INTEGRATION, DOCUMENT_STATUS_ID, DESIGN_OFFICE_ID, :lv_current_utctimestamp as _VALID_FROM, null as _VALID_TO, _SOURCE, :lv_current_user as _CREATED_BY 
    		from :lt_update_records;
		
	END IF;	
    
END